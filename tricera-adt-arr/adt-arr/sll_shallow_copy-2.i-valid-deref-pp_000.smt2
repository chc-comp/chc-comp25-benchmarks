(set-logic HORN)

(declare-datatypes ((|node| 0)) (((|node|  (|node::next| Int)))))
(declare-datatypes ((|AddrRange| 0)) (((|AddrRange|  (|AddrRangeStart| Int) (|AddrRangeSize| Int)))))
(declare-datatypes ((|HeapObject| 0)) (((|O_Int|  (|getInt| Int)) (|O_UInt|  (|getUInt| Int)) (|O_Addr|  (|getAddr| Int)) (|O_AddrRange|  (|getAddrRange| AddrRange)) (|O_node|  (|getnode| node)) (|defObj| ))))
(declare-datatypes ((|Heap| 0)) (((|HeapCtor|  (|HeapSize| Int) (|HeapContents| (Array Int HeapObject))))))
(declare-datatypes ((|AllocResHeap| 0)) (((|AllocResHeap|  (|newHeap| Heap) (|newAddr| Int)))))

(declare-fun |_Glue4| ( Heap Int HeapObject ) Bool)
(declare-fun |_Glue13| ( Int Heap HeapObject ) Bool)
(declare-fun |CHC_COMP_FALSE| ( ) Bool)
(declare-fun |Inv_Heap_exp_exp| ( Int Int ) Bool)
(declare-fun |_Glue12| ( Heap Heap Int HeapObject ) Bool)

(assert
  (forall ( (A Int) (B AllocResHeap) (C Heap) (D Int) (E HeapObject) (F node) ) 
    (=>
      (and
        (let ((a!1 (HeapCtor (+ 1 (HeapSize C))
                     (store (HeapContents C) (+ 1 (HeapSize C)) E))))
(let ((a!2 (= (AllocResHeap a!1 (+ 1 (HeapSize C))) B)))
  (and (= A (newAddr B))
       a!2
       (= (node D) F)
       (= (O_node F) E)
       (= (HeapCtor 0 ((as const (Array Int HeapObject)) defObj)) C))))
      )
      (Inv_Heap_exp_exp A D)
    )
  )
)
(assert
  (forall ( (A Int) (B Heap) (C Int) (D AllocResHeap) (E Int) (F HeapObject) (G node) (H AllocResHeap) (I Int) (J Heap) (K HeapObject) (L node) ) 
    (=>
      (and
        (let ((a!1 (HeapCtor (+ 1 (HeapSize B))
                     (store (HeapContents B) (+ 1 (HeapSize B)) F)))
      (a!3 (HeapCtor (+ 1 (HeapSize J))
                     (store (HeapContents J) (+ 1 (HeapSize J)) K))))
(let ((a!2 (= (AllocResHeap a!1 (+ 1 (HeapSize B))) H))
      (a!4 (= (AllocResHeap a!3 (+ 1 (HeapSize J))) D)))
  (and (= 0 C)
       (= A (newAddr D))
       (not (= C I))
       a!2
       a!4
       (= (AllocResHeap J I) H)
       (= (node E) L)
       (= (O_node G) F)
       (= (O_node L) K)
       (= (HeapCtor 0 ((as const (Array Int HeapObject)) defObj)) B))))
      )
      (Inv_Heap_exp_exp A E)
    )
  )
)
(assert
  (forall ( (A Heap) (B Int) (C HeapObject) (D node) (E AllocResHeap) (F Int) (G Heap) (H HeapObject) (I node) (J AllocResHeap) (K Int) (L Heap) ) 
    (=>
      (and
        (let ((a!1 (HeapCtor (+ 1 (HeapSize A))
                     (store (HeapContents A) (+ 1 (HeapSize A)) C)))
      (a!3 (HeapCtor (+ 1 (HeapSize G))
                     (store (HeapContents G) (+ 1 (HeapSize G)) H))))
(let ((a!2 (= (AllocResHeap a!1 (+ 1 (HeapSize A))) E))
      (a!4 (= (AllocResHeap a!3 (+ 1 (HeapSize G))) J)))
  (and (= 0 B)
       (not (= B F))
       (not (= B K))
       a!2
       a!4
       (= (AllocResHeap G F) E)
       (= (AllocResHeap L K) J)
       (= (O_node I) H)
       (= (O_node D) C)
       (>= (HeapSize L) F)
       (not (<= F 0))
       (= (HeapCtor 0 ((as const (Array Int HeapObject)) defObj)) A))))
      )
      (Inv_Heap_exp_exp F K)
    )
  )
)
(assert
  (forall ( (A Heap) (B Int) (C Heap) (D HeapObject) (E node) (F AllocResHeap) (G Heap) (H HeapObject) (I node) (J AllocResHeap) (K Heap) (L HeapObject) (M node) (N Int) (O HeapObject) (P node) (Q Int) (R Int) ) 
    (=>
      (and
        (Inv_Heap_exp_exp R Q)
        (let ((a!1 (HeapCtor (+ 1 (HeapSize A))
                     (store (HeapContents A) (+ 1 (HeapSize A)) D)))
      (a!3 (HeapCtor (+ 1 (HeapSize G))
                     (store (HeapContents G) (+ 1 (HeapSize G)) H)))
      (a!5 (ite (and (not (<= R 0)) (>= (HeapSize C) R))
                (select (HeapContents C) R)
                defObj))
      (a!6 (ite (and (not (<= R 0)) (>= (HeapSize K) R))
                (HeapCtor (HeapSize K) (store (HeapContents K) R L))
                K)))
(let ((a!2 (= (AllocResHeap a!1 (+ 1 (HeapSize A))) F))
      (a!4 (= (AllocResHeap a!3 (+ 1 (HeapSize G))) J)))
  (and (= (HeapCtor 0 ((as const (Array Int HeapObject)) defObj)) A)
       (= 0 B)
       (not (= B N))
       (not (= B R))
       a!2
       a!4
       (= (AllocResHeap K N) J)
       (= (AllocResHeap G R) F)
       (= (node N) M)
       (= (node Q) P)
       (= a!5 O)
       (= (O_node I) H)
       (= (O_node E) D)
       (= (O_node P) O)
       (= (O_node M) L)
       (>= (HeapSize C) R)
       (not (<= R 0))
       (= a!6 C))))
      )
      (_Glue12 C K R O)
    )
  )
)
(assert
  (forall ( (A Heap) (B HeapObject) (C node) (D AllocResHeap) (E Heap) (F HeapObject) (G node) (H AllocResHeap) (I Heap) (J Int) (K HeapObject) (L node) (M Int) (N HeapObject) (O Int) (P Heap) ) 
    (=>
      (and
        (let ((a!1 (HeapCtor (+ 1 (HeapSize A))
                     (store (HeapContents A) (+ 1 (HeapSize A)) B)))
      (a!3 (HeapCtor (+ 1 (HeapSize E))
                     (store (HeapContents E) (+ 1 (HeapSize E)) F)))
      (a!5 (ite (and (not (<= O 0)) (>= (HeapSize P) O))
                (select (HeapContents P) O)
                defObj))
      (a!6 (or (<= O 0) (not (>= (HeapSize P) O))))
      (a!7 (ite (and (not (<= O 0)) (>= (HeapSize I) O))
                (HeapCtor (HeapSize I) (store (HeapContents I) O K))
                I)))
(let ((a!2 (= (AllocResHeap a!1 (+ 1 (HeapSize A))) D))
      (a!4 (= (AllocResHeap a!3 (+ 1 (HeapSize E))) H)))
  (and (= (HeapCtor 0 ((as const (Array Int HeapObject)) defObj)) A)
       (= 0 J)
       (not (= J M))
       (not (= J O))
       a!2
       a!4
       (= (AllocResHeap I M) H)
       (= (AllocResHeap E O) D)
       (= (node M) L)
       (= a!5 N)
       (= (O_node L) K)
       (= (O_node G) F)
       (= (O_node C) B)
       a!6
       (= a!7 P))))
      )
      (_Glue12 P I O N)
    )
  )
)
(assert
  (forall ( (A node) (B HeapObject) (C node) (D HeapObject) (E Int) (F Heap) (G Heap) (H Int) (I Int) ) 
    (=>
      (and
        (_Glue12 G F E D)
        (Inv_Heap_exp_exp I H)
        (let ((a!1 (ite (and (not (<= I 0)) (>= (HeapSize G) I))
                (select (HeapContents G) I)
                defObj)))
  (and (= (|node::next| A) I)
       (= (node H) C)
       (= (getnode D) A)
       (= a!1 B)
       (= (O_node C) B)
       (>= (HeapSize G) I)
       (not (<= I 0))
       ((_ is O_node) D)))
      )
      (_Glue13 E F B)
    )
  )
)
(assert
  (forall ( (A HeapObject) (B Int) (C node) (D HeapObject) (E Int) (F Heap) (G Heap) ) 
    (=>
      (and
        (_Glue12 G F E D)
        (let ((a!1 (ite (and (not (<= B 0)) (>= (HeapSize G) B))
                (select (HeapContents G) B)
                defObj))
      (a!2 (or (<= B 0) (not (>= (HeapSize G) B)))))
  (and (= (|node::next| C) B) (= (getnode D) C) (= a!1 A) a!2 ((_ is O_node) D)))
      )
      (_Glue13 E F A)
    )
  )
)
(assert
  (forall ( (A Int) (B AllocResHeap) (C Heap) (D Int) (E HeapObject) (F node) ) 
    (=>
      (and
        (let ((a!1 (HeapCtor (+ 1 (HeapSize C))
                     (store (HeapContents C) (+ 1 (HeapSize C)) E))))
(let ((a!2 (= (AllocResHeap a!1 (+ 1 (HeapSize C))) B)))
  (and (= A (newAddr B))
       a!2
       (= (node D) F)
       (= (O_node F) E)
       (= (HeapCtor 0 ((as const (Array Int HeapObject)) defObj)) C))))
      )
      (Inv_Heap_exp_exp A D)
    )
  )
)
(assert
  (forall ( (A Int) (B Heap) (C Int) (D AllocResHeap) (E Int) (F HeapObject) (G node) (H AllocResHeap) (I Int) (J Heap) (K HeapObject) (L node) ) 
    (=>
      (and
        (let ((a!1 (HeapCtor (+ 1 (HeapSize B))
                     (store (HeapContents B) (+ 1 (HeapSize B)) F)))
      (a!3 (HeapCtor (+ 1 (HeapSize J))
                     (store (HeapContents J) (+ 1 (HeapSize J)) K))))
(let ((a!2 (= (AllocResHeap a!1 (+ 1 (HeapSize B))) H))
      (a!4 (= (AllocResHeap a!3 (+ 1 (HeapSize J))) D)))
  (and (= 0 C)
       (= A (newAddr D))
       (not (= C I))
       a!2
       a!4
       (= (AllocResHeap J I) H)
       (= (node E) L)
       (= (O_node G) F)
       (= (O_node L) K)
       (= (HeapCtor 0 ((as const (Array Int HeapObject)) defObj)) B))))
      )
      (Inv_Heap_exp_exp A E)
    )
  )
)
(assert
  (forall ( (A Heap) (B Int) (C HeapObject) (D node) (E AllocResHeap) (F Int) (G Heap) (H HeapObject) (I node) (J AllocResHeap) (K Int) (L Heap) ) 
    (=>
      (and
        (let ((a!1 (HeapCtor (+ 1 (HeapSize A))
                     (store (HeapContents A) (+ 1 (HeapSize A)) C)))
      (a!3 (HeapCtor (+ 1 (HeapSize G))
                     (store (HeapContents G) (+ 1 (HeapSize G)) H))))
(let ((a!2 (= (AllocResHeap a!1 (+ 1 (HeapSize A))) E))
      (a!4 (= (AllocResHeap a!3 (+ 1 (HeapSize G))) J)))
  (and (= 0 B)
       (not (= B F))
       (not (= B K))
       a!2
       a!4
       (= (AllocResHeap G F) E)
       (= (AllocResHeap L K) J)
       (= (O_node I) H)
       (= (O_node D) C)
       (>= (HeapSize L) F)
       (not (<= F 0))
       (= (HeapCtor 0 ((as const (Array Int HeapObject)) defObj)) A))))
      )
      (Inv_Heap_exp_exp F K)
    )
  )
)
(assert
  (forall ( (A Heap) (B Int) (C Heap) (D HeapObject) (E node) (F AllocResHeap) (G Heap) (H HeapObject) (I node) (J AllocResHeap) (K Heap) (L HeapObject) (M node) (N Int) (O HeapObject) (P node) (Q Int) (R Int) ) 
    (=>
      (and
        (Inv_Heap_exp_exp R Q)
        (let ((a!1 (HeapCtor (+ 1 (HeapSize A))
                     (store (HeapContents A) (+ 1 (HeapSize A)) D)))
      (a!3 (HeapCtor (+ 1 (HeapSize G))
                     (store (HeapContents G) (+ 1 (HeapSize G)) H)))
      (a!5 (ite (and (not (<= R 0)) (>= (HeapSize C) R))
                (select (HeapContents C) R)
                defObj))
      (a!6 (ite (and (not (<= R 0)) (>= (HeapSize K) R))
                (HeapCtor (HeapSize K) (store (HeapContents K) R L))
                K)))
(let ((a!2 (= (AllocResHeap a!1 (+ 1 (HeapSize A))) F))
      (a!4 (= (AllocResHeap a!3 (+ 1 (HeapSize G))) J)))
  (and (= (HeapCtor 0 ((as const (Array Int HeapObject)) defObj)) A)
       (= 0 B)
       (not (= B N))
       (not (= B R))
       a!2
       a!4
       (= (AllocResHeap K N) J)
       (= (AllocResHeap G R) F)
       (= (node N) M)
       (= (node Q) P)
       (= a!5 O)
       (= (O_node I) H)
       (= (O_node E) D)
       (= (O_node P) O)
       (= (O_node M) L)
       (>= (HeapSize C) R)
       (not (<= R 0))
       (= a!6 C))))
      )
      (_Glue4 K R O)
    )
  )
)
(assert
  (forall ( (A Heap) (B HeapObject) (C node) (D AllocResHeap) (E Heap) (F HeapObject) (G node) (H AllocResHeap) (I Heap) (J Int) (K HeapObject) (L node) (M Int) (N HeapObject) (O Int) (P Heap) ) 
    (=>
      (and
        (let ((a!1 (HeapCtor (+ 1 (HeapSize A))
                     (store (HeapContents A) (+ 1 (HeapSize A)) B)))
      (a!3 (HeapCtor (+ 1 (HeapSize E))
                     (store (HeapContents E) (+ 1 (HeapSize E)) F)))
      (a!5 (ite (and (not (<= O 0)) (>= (HeapSize P) O))
                (select (HeapContents P) O)
                defObj))
      (a!6 (or (<= O 0) (not (>= (HeapSize P) O))))
      (a!7 (ite (and (not (<= O 0)) (>= (HeapSize I) O))
                (HeapCtor (HeapSize I) (store (HeapContents I) O K))
                I)))
(let ((a!2 (= (AllocResHeap a!1 (+ 1 (HeapSize A))) D))
      (a!4 (= (AllocResHeap a!3 (+ 1 (HeapSize E))) H)))
  (and (= (HeapCtor 0 ((as const (Array Int HeapObject)) defObj)) A)
       (= 0 J)
       (not (= J M))
       (not (= J O))
       a!2
       a!4
       (= (AllocResHeap I M) H)
       (= (AllocResHeap E O) D)
       (= (node M) L)
       (= a!5 N)
       (= (O_node L) K)
       (= (O_node G) F)
       (= (O_node C) B)
       a!6
       (= a!7 P))))
      )
      (_Glue4 I O N)
    )
  )
)
(assert
  (forall ( (A Int) (B AllocResHeap) (C Heap) (D Int) (E HeapObject) (F node) ) 
    (=>
      (and
        (let ((a!1 (HeapCtor (+ 1 (HeapSize C))
                     (store (HeapContents C) (+ 1 (HeapSize C)) E))))
(let ((a!2 (= (AllocResHeap a!1 (+ 1 (HeapSize C))) B)))
  (and (= A (newAddr B))
       a!2
       (= (node D) F)
       (= (O_node F) E)
       (= (HeapCtor 0 ((as const (Array Int HeapObject)) defObj)) C))))
      )
      (Inv_Heap_exp_exp A D)
    )
  )
)
(assert
  (forall ( (A Int) (B Heap) (C Int) (D AllocResHeap) (E Int) (F HeapObject) (G node) (H AllocResHeap) (I Int) (J Heap) (K HeapObject) (L node) ) 
    (=>
      (and
        (let ((a!1 (HeapCtor (+ 1 (HeapSize B))
                     (store (HeapContents B) (+ 1 (HeapSize B)) F)))
      (a!3 (HeapCtor (+ 1 (HeapSize J))
                     (store (HeapContents J) (+ 1 (HeapSize J)) K))))
(let ((a!2 (= (AllocResHeap a!1 (+ 1 (HeapSize B))) H))
      (a!4 (= (AllocResHeap a!3 (+ 1 (HeapSize J))) D)))
  (and (= 0 C)
       (= A (newAddr D))
       (not (= C I))
       a!2
       a!4
       (= (AllocResHeap J I) H)
       (= (node E) L)
       (= (O_node G) F)
       (= (O_node L) K)
       (= (HeapCtor 0 ((as const (Array Int HeapObject)) defObj)) B))))
      )
      (Inv_Heap_exp_exp A E)
    )
  )
)
(assert
  (forall ( (A HeapObject) (B node) (C HeapObject) (D Heap) (E Int) (F Int) ) 
    (=>
      (and
        (_Glue13 F D C)
        (Inv_Heap_exp_exp F E)
        (let ((a!1 (ite (and (not (<= F 0)) (>= (HeapSize D) F))
                (select (HeapContents D) F)
                defObj)))
  (and (= (node E) B)
       (= a!1 A)
       (= (O_node B) A)
       (>= (HeapSize D) F)
       (not (<= F 0))
       (not ((_ is O_node) C))))
      )
      CHC_COMP_FALSE
    )
  )
)
(assert
  (forall ( (A HeapObject) (B HeapObject) (C Heap) (D Int) ) 
    (=>
      (and
        (_Glue13 D C B)
        (let ((a!1 (ite (and (not (<= D 0)) (>= (HeapSize C) D))
                (select (HeapContents C) D)
                defObj))
      (a!2 (or (<= D 0) (not (>= (HeapSize C) D)))))
  (and (not ((_ is O_node) B)) (= a!1 A) a!2 ((_ is O_node) A)))
      )
      CHC_COMP_FALSE
    )
  )
)
(assert
  (forall ( (A HeapObject) (B node) (C HeapObject) (D Heap) (E Int) (F Int) ) 
    (=>
      (and
        (_Glue4 D F C)
        (Inv_Heap_exp_exp F E)
        (let ((a!1 (ite (and (not (<= F 0)) (>= (HeapSize D) F))
                (select (HeapContents D) F)
                defObj)))
  (and (= (node E) B)
       (= a!1 A)
       (= (O_node B) A)
       (>= (HeapSize D) F)
       (not (<= F 0))
       (not ((_ is O_node) C))))
      )
      CHC_COMP_FALSE
    )
  )
)
(assert
  (forall ( (A HeapObject) (B HeapObject) (C Int) (D Heap) ) 
    (=>
      (and
        (_Glue4 D C B)
        (let ((a!1 (ite (and (not (<= C 0)) (>= (HeapSize D) C))
                (select (HeapContents D) C)
                defObj))
      (a!2 (or (<= C 0) (not (>= (HeapSize D) C)))))
  (and (not ((_ is O_node) B)) (= a!1 A) a!2 ((_ is O_node) A)))
      )
      CHC_COMP_FALSE
    )
  )
)
(assert
  (forall ( (A Heap) (B HeapObject) (C node) (D AllocResHeap) (E Heap) (F HeapObject) (G node) (H AllocResHeap) (I HeapObject) (J Int) (K Heap) (L Int) (M Int) ) 
    (=>
      (and
        (let ((a!1 (HeapCtor (+ 1 (HeapSize A))
                     (store (HeapContents A) (+ 1 (HeapSize A)) B)))
      (a!3 (HeapCtor (+ 1 (HeapSize E))
                     (store (HeapContents E) (+ 1 (HeapSize E)) F)))
      (a!5 (ite (and (not (<= J 0)) (>= (HeapSize K) J))
                (select (HeapContents K) J)
                defObj))
      (a!6 (or (<= J 0) (not (>= (HeapSize K) J)))))
(let ((a!2 (= (AllocResHeap a!1 (+ 1 (HeapSize A))) D))
      (a!4 (= (AllocResHeap a!3 (+ 1 (HeapSize E))) H)))
  (and (= (HeapCtor 0 ((as const (Array Int HeapObject)) defObj)) A)
       (= 0 M)
       (not (= M J))
       (not (= M L))
       a!2
       a!4
       (= (AllocResHeap E J) D)
       (= (AllocResHeap K L) H)
       (= a!5 I)
       (= (O_node G) F)
       (= (O_node C) B)
       a!6
       (not ((_ is O_node) I)))))
      )
      CHC_COMP_FALSE
    )
  )
)
(assert
  (forall ( (CHC_COMP_UNUSED Bool) ) 
    (=>
      (and
        CHC_COMP_FALSE
      )
      false
    )
  )
)

(check-sat)
(exit)
