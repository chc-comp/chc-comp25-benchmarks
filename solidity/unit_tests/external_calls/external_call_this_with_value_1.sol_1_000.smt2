(set-logic HORN)

(declare-datatypes ((state_type 0)) (((state_type  (balances (Array Int Int))))))
(declare-datatypes ((abi_type 0)) (((abi_type ))))
(declare-datatypes ((bytes_tuple 0)) (((bytes_tuple  (bytes_tuple_accessor_array (Array Int Int)) (bytes_tuple_accessor_length Int)))))
(declare-datatypes ((ecrecover_input_type 0)) (((ecrecover_input_type  (hash Int) (v Int) (r Int) (s Int)))))
(declare-datatypes ((crypto_type 0)) (((crypto_type  (ecrecover (Array ecrecover_input_type Int)) (keccak256 (Array bytes_tuple Int)) (ripemd160 (Array bytes_tuple Int)) (sha256 (Array bytes_tuple Int))))))
(declare-datatypes ((tx_type 0)) (((tx_type  (block.basefee Int) (block.chainid Int) (block.coinbase Int) (block.difficulty Int) (block.gaslimit Int) (block.number Int) (block.timestamp Int) (blockhash (Array Int Int)) (msg.data bytes_tuple) (msg.sender Int) (msg.sig Int) (msg.value Int) (tx.gasprice Int) (tx.origin Int)))))

(declare-fun |summary_3_function_g__41_46_0| ( Int Int abi_type crypto_type tx_type state_type state_type ) Bool)
(declare-fun |contract_initializer_entry_19_C_46_0| ( Int Int abi_type crypto_type tx_type state_type state_type ) Bool)
(declare-fun |summary_constructor_2_C_46_0| ( Int Int abi_type crypto_type tx_type state_type state_type ) Bool)
(declare-fun |summary_5_function_h__45_46_0| ( Int Int abi_type crypto_type tx_type state_type state_type ) Bool)
(declare-fun |error_target_6_0| ( ) Bool)
(declare-fun |block_14_function_h__45_46_0| ( Int Int abi_type crypto_type tx_type state_type state_type ) Bool)
(declare-fun |contract_initializer_18_C_46_0| ( Int Int abi_type crypto_type tx_type state_type state_type ) Bool)
(declare-fun |block_16_return_function_h__45_46_0| ( Int Int abi_type crypto_type tx_type state_type state_type ) Bool)
(declare-fun |block_17_function_h__45_46_0| ( Int Int abi_type crypto_type tx_type state_type state_type ) Bool)
(declare-fun |contract_initializer_after_init_20_C_46_0| ( Int Int abi_type crypto_type tx_type state_type state_type ) Bool)
(declare-fun |block_7_function_g__41_46_0| ( Int Int abi_type crypto_type tx_type state_type state_type ) Bool)
(declare-fun |block_9_return_function_g__41_46_0| ( Int Int abi_type crypto_type tx_type state_type state_type ) Bool)
(declare-fun |implicit_constructor_entry_21_C_46_0| ( Int Int abi_type crypto_type tx_type state_type state_type ) Bool)
(declare-fun |block_8_g_40_46_0| ( Int Int abi_type crypto_type tx_type state_type state_type ) Bool)
(declare-fun |block_11_function_g__41_46_0| ( Int Int abi_type crypto_type tx_type state_type state_type ) Bool)
(declare-fun |interface_0_C_46_0| ( Int abi_type crypto_type state_type ) Bool)
(declare-fun |summary_4_function_g__41_46_0| ( Int Int abi_type crypto_type tx_type state_type state_type ) Bool)
(declare-fun |block_15_h_44_46_0| ( Int Int abi_type crypto_type tx_type state_type state_type ) Bool)
(declare-fun |block_13_function_g__41_46_0| ( Int Int abi_type crypto_type tx_type state_type state_type ) Bool)
(declare-fun |summary_10_function_h__45_46_0| ( Int Int abi_type crypto_type tx_type state_type state_type ) Bool)
(declare-fun |summary_6_function_h__45_46_0| ( Int Int abi_type crypto_type tx_type state_type state_type ) Bool)
(declare-fun |block_12_function_g__41_46_0| ( Int Int abi_type crypto_type tx_type state_type state_type ) Bool)

(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D state_type) (E state_type) (F Int) (G tx_type) ) 
    (=>
      (and
        true
      )
      (block_7_function_g__41_46_0 C F A B G D E)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D state_type) (E state_type) (F Int) (G tx_type) ) 
    (=>
      (and
        (block_7_function_g__41_46_0 C F A B G D E)
        (and (= C 0) (= E D))
      )
      (block_8_g_40_46_0 C F A B G D E)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D state_type) (E state_type) (F Int) (G tx_type) ) 
    (=>
      (and
        (summary_5_function_h__45_46_0 C F A B G D E)
        true
      )
      (summary_10_function_h__45_46_0 C F A B G D E)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D Int) (E Bool) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L state_type) (M state_type) (N state_type) (O Int) (P tx_type) (Q tx_type) (R tx_type) ) 
    (=>
      (and
        (block_8_g_40_46_0 C O A B P L M)
        (summary_10_function_h__45_46_0 D F A B Q M N)
        (let ((a!1 (= (select (bytes_tuple_accessor_array (msg.data Q)) 3) 101))
      (a!2 (= (select (bytes_tuple_accessor_array (msg.data Q)) 2) 211))
      (a!3 (= (select (bytes_tuple_accessor_array (msg.data Q)) 1) 201))
      (a!4 (= (select (bytes_tuple_accessor_array (msg.data Q)) 0) 184)))
  (and (= P R)
       a!1
       a!2
       a!3
       a!4
       (= (tx.origin Q) (tx.origin P))
       (= (msg.value Q) 0)
       (= (msg.sig Q) 3100234597)
       (= (msg.sender Q) O)
       (= J (select (balances M) I))
       (= I H)
       (= H O)
       (= F O)
       (= G 10)
       (= K 100)
       (>= (tx.origin Q) 0)
       (>= (tx.gasprice Q) 0)
       (>= (msg.value Q) 0)
       (>= (msg.sender Q) 0)
       (>= (block.timestamp Q) 0)
       (>= (block.number Q) 0)
       (>= (block.gaslimit Q) 0)
       (>= (block.difficulty Q) 0)
       (>= (block.coinbase Q) 0)
       (>= (block.chainid Q) 0)
       (>= (block.basefee Q) 0)
       (>= (bytes_tuple_accessor_length (msg.data Q)) 4)
       (>= J 0)
       (>= I 0)
       (<= (tx.origin Q) 1461501637330902918203684832716283019655932542975)
       (<= (tx.gasprice Q)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (msg.value Q)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (msg.sender Q) 1461501637330902918203684832716283019655932542975)
       (<= (block.timestamp Q)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.number Q)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.gaslimit Q)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.difficulty Q)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.coinbase Q) 1461501637330902918203684832716283019655932542975)
       (<= (block.chainid Q)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.basefee Q)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= J
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= I 1461501637330902918203684832716283019655932542975)
       (not (<= D 0))
       (= E true)
       (= E (= J K))))
      )
      (summary_3_function_g__41_46_0 D O A B P L N)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D state_type) (E state_type) (F Int) (G tx_type) ) 
    (=>
      (and
        (block_11_function_g__41_46_0 C F A B G D E)
        true
      )
      (summary_3_function_g__41_46_0 C F A B G D E)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D state_type) (E state_type) (F Int) (G tx_type) ) 
    (=>
      (and
        (block_12_function_g__41_46_0 C F A B G D E)
        true
      )
      (summary_3_function_g__41_46_0 C F A B G D E)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D state_type) (E state_type) (F Int) (G tx_type) ) 
    (=>
      (and
        (block_9_return_function_g__41_46_0 C F A B G D E)
        true
      )
      (summary_3_function_g__41_46_0 C F A B G D E)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D Int) (E Int) (F Bool) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Bool) (N Int) (O Int) (P Int) (Q Int) (R state_type) (S state_type) (T state_type) (U Int) (V tx_type) (W tx_type) (X tx_type) ) 
    (=>
      (and
        (block_8_g_40_46_0 C U A B V R S)
        (summary_10_function_h__45_46_0 D G A B W S T)
        (let ((a!1 (= (select (bytes_tuple_accessor_array (msg.data W)) 3) 101))
      (a!2 (= (select (bytes_tuple_accessor_array (msg.data W)) 2) 211))
      (a!3 (= (select (bytes_tuple_accessor_array (msg.data W)) 1) 201))
      (a!4 (= (select (bytes_tuple_accessor_array (msg.data W)) 0) 184)))
  (and (= M (= K L))
       (= V X)
       a!1
       a!2
       a!3
       a!4
       (= (tx.origin W) (tx.origin V))
       (= (msg.value W) 0)
       (= (msg.sig W) 3100234597)
       (= (msg.sender W) U)
       (= E 1)
       (= K (select (balances T) J))
       (= G U)
       (= D 0)
       (= P (select (balances S) O))
       (= O N)
       (= N U)
       (= H 10)
       (= I U)
       (= L 100)
       (= J I)
       (= Q 100)
       (>= (tx.origin W) 0)
       (>= (tx.gasprice W) 0)
       (>= (msg.value W) 0)
       (>= (msg.sender W) 0)
       (>= (block.timestamp W) 0)
       (>= (block.number W) 0)
       (>= (block.gaslimit W) 0)
       (>= (block.difficulty W) 0)
       (>= (block.coinbase W) 0)
       (>= (block.chainid W) 0)
       (>= (block.basefee W) 0)
       (>= (bytes_tuple_accessor_length (msg.data W)) 4)
       (>= K 0)
       (>= P 0)
       (>= O 0)
       (>= J 0)
       (<= (tx.origin W) 1461501637330902918203684832716283019655932542975)
       (<= (tx.gasprice W)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (msg.value W)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (msg.sender W) 1461501637330902918203684832716283019655932542975)
       (<= (block.timestamp W)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.number W)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.gaslimit W)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.difficulty W)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.coinbase W) 1461501637330902918203684832716283019655932542975)
       (<= (block.chainid W)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.basefee W)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= K
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= P
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= O 1461501637330902918203684832716283019655932542975)
       (<= J 1461501637330902918203684832716283019655932542975)
       (= F true)
       (not M)
       (= F (= P Q))))
      )
      (block_11_function_g__41_46_0 E U A B V R T)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D Int) (E Int) (F Int) (G Bool) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Bool) (O Int) (P Int) (Q Int) (R Int) (S Bool) (T Int) (U Int) (V Int) (W Int) (X state_type) (Y state_type) (Z state_type) (A1 Int) (B1 tx_type) (C1 tx_type) (D1 tx_type) ) 
    (=>
      (and
        (block_8_g_40_46_0 C A1 A B B1 X Y)
        (summary_10_function_h__45_46_0 D H A B C1 Y Z)
        (let ((a!1 (= (select (bytes_tuple_accessor_array (msg.data C1)) 3) 101))
      (a!2 (= (select (bytes_tuple_accessor_array (msg.data C1)) 2) 211))
      (a!3 (= (select (bytes_tuple_accessor_array (msg.data C1)) 1) 201))
      (a!4 (= (select (bytes_tuple_accessor_array (msg.data C1)) 0) 184)))
  (and (= N (= L M))
       (= S (= Q R))
       (= B1 D1)
       a!1
       a!2
       a!3
       a!4
       (= (tx.origin C1) (tx.origin B1))
       (= (msg.value C1) 0)
       (= (msg.sig C1) 3100234597)
       (= (msg.sender C1) A1)
       (= F 2)
       (= K J)
       (= E D)
       (= D 0)
       (= Q (select (balances Z) P))
       (= M 100)
       (= L (select (balances Z) K))
       (= J A1)
       (= I 10)
       (= H A1)
       (= V (select (balances Y) U))
       (= U T)
       (= T A1)
       (= O A1)
       (= R 90)
       (= P O)
       (= W 100)
       (>= (tx.origin C1) 0)
       (>= (tx.gasprice C1) 0)
       (>= (msg.value C1) 0)
       (>= (msg.sender C1) 0)
       (>= (block.timestamp C1) 0)
       (>= (block.number C1) 0)
       (>= (block.gaslimit C1) 0)
       (>= (block.difficulty C1) 0)
       (>= (block.coinbase C1) 0)
       (>= (block.chainid C1) 0)
       (>= (block.basefee C1) 0)
       (>= (bytes_tuple_accessor_length (msg.data C1)) 4)
       (>= K 0)
       (>= Q 0)
       (>= L 0)
       (>= V 0)
       (>= U 0)
       (>= P 0)
       (<= (tx.origin C1) 1461501637330902918203684832716283019655932542975)
       (<= (tx.gasprice C1)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (msg.value C1)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (msg.sender C1) 1461501637330902918203684832716283019655932542975)
       (<= (block.timestamp C1)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.number C1)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.gaslimit C1)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.difficulty C1)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.coinbase C1)
           1461501637330902918203684832716283019655932542975)
       (<= (block.chainid C1)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.basefee C1)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= K 1461501637330902918203684832716283019655932542975)
       (<= Q
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= L
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= V
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= U 1461501637330902918203684832716283019655932542975)
       (<= P 1461501637330902918203684832716283019655932542975)
       (= G true)
       (not S)
       (= G (= V W))))
      )
      (block_12_function_g__41_46_0 F A1 A B B1 X Z)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D Int) (E Int) (F Int) (G Bool) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Bool) (O Int) (P Int) (Q Int) (R Int) (S Bool) (T Int) (U Int) (V Int) (W Int) (X state_type) (Y state_type) (Z state_type) (A1 Int) (B1 tx_type) (C1 tx_type) (D1 tx_type) ) 
    (=>
      (and
        (block_8_g_40_46_0 C A1 A B B1 X Y)
        (summary_10_function_h__45_46_0 D H A B C1 Y Z)
        (let ((a!1 (= (select (bytes_tuple_accessor_array (msg.data C1)) 3) 101))
      (a!2 (= (select (bytes_tuple_accessor_array (msg.data C1)) 2) 211))
      (a!3 (= (select (bytes_tuple_accessor_array (msg.data C1)) 1) 201))
      (a!4 (= (select (bytes_tuple_accessor_array (msg.data C1)) 0) 184)))
  (and (= N (= L M))
       (= S (= Q R))
       (= B1 D1)
       a!1
       a!2
       a!3
       a!4
       (= (tx.origin C1) (tx.origin B1))
       (= (msg.value C1) 0)
       (= (msg.sig C1) 3100234597)
       (= (msg.sender C1) A1)
       (= F E)
       (= K J)
       (= E D)
       (= D 0)
       (= Q (select (balances Z) P))
       (= M 100)
       (= L (select (balances Z) K))
       (= J A1)
       (= I 10)
       (= H A1)
       (= V (select (balances Y) U))
       (= U T)
       (= T A1)
       (= O A1)
       (= R 90)
       (= P O)
       (= W 100)
       (>= (tx.origin C1) 0)
       (>= (tx.gasprice C1) 0)
       (>= (msg.value C1) 0)
       (>= (msg.sender C1) 0)
       (>= (block.timestamp C1) 0)
       (>= (block.number C1) 0)
       (>= (block.gaslimit C1) 0)
       (>= (block.difficulty C1) 0)
       (>= (block.coinbase C1) 0)
       (>= (block.chainid C1) 0)
       (>= (block.basefee C1) 0)
       (>= (bytes_tuple_accessor_length (msg.data C1)) 4)
       (>= K 0)
       (>= Q 0)
       (>= L 0)
       (>= V 0)
       (>= U 0)
       (>= P 0)
       (<= (tx.origin C1) 1461501637330902918203684832716283019655932542975)
       (<= (tx.gasprice C1)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (msg.value C1)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (msg.sender C1) 1461501637330902918203684832716283019655932542975)
       (<= (block.timestamp C1)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.number C1)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.gaslimit C1)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.difficulty C1)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.coinbase C1)
           1461501637330902918203684832716283019655932542975)
       (<= (block.chainid C1)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.basefee C1)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= K 1461501637330902918203684832716283019655932542975)
       (<= Q
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= L
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= V
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= U 1461501637330902918203684832716283019655932542975)
       (<= P 1461501637330902918203684832716283019655932542975)
       (= G true)
       (= G (= V W))))
      )
      (block_9_return_function_g__41_46_0 F A1 A B B1 X Z)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D state_type) (E state_type) (F Int) (G tx_type) ) 
    (=>
      (and
        true
      )
      (block_13_function_g__41_46_0 C F A B G D E)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D Int) (E Int) (F state_type) (G state_type) (H state_type) (I state_type) (J Int) (K tx_type) ) 
    (=>
      (and
        (block_13_function_g__41_46_0 C J A B K F G)
        (summary_3_function_g__41_46_0 D J A B K H I)
        (let ((a!1 (= (select (bytes_tuple_accessor_array (msg.data K)) 3) 142))
      (a!2 (= (select (bytes_tuple_accessor_array (msg.data K)) 2) 155))
      (a!3 (= (select (bytes_tuple_accessor_array (msg.data K)) 1) 23))
      (a!4 (= (select (bytes_tuple_accessor_array (msg.data K)) 0) 226))
      (a!5 (>= (+ (select (balances G) J) E) 0))
      (a!6 (<= (+ (select (balances G) J) E)
               115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (a!7 (store (balances G) J (+ (select (balances G) J) E))))
  (and (= G F)
       a!1
       a!2
       a!3
       a!4
       (= (msg.value K) 0)
       (= (msg.sig K) 3793197966)
       (= C 0)
       (>= (tx.origin K) 0)
       (>= (tx.gasprice K) 0)
       (>= (msg.value K) 0)
       (>= (msg.sender K) 0)
       (>= (block.timestamp K) 0)
       (>= (block.number K) 0)
       (>= (block.gaslimit K) 0)
       (>= (block.difficulty K) 0)
       (>= (block.coinbase K) 0)
       (>= (block.chainid K) 0)
       (>= (block.basefee K) 0)
       (>= (bytes_tuple_accessor_length (msg.data K)) 4)
       a!5
       (>= E (msg.value K))
       (<= (tx.origin K) 1461501637330902918203684832716283019655932542975)
       (<= (tx.gasprice K)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (msg.value K)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (msg.sender K) 1461501637330902918203684832716283019655932542975)
       (<= (block.timestamp K)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.number K)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.gaslimit K)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.difficulty K)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.coinbase K) 1461501637330902918203684832716283019655932542975)
       (<= (block.chainid K)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.basefee K)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       a!6
       (= H (state_type a!7))))
      )
      (summary_4_function_g__41_46_0 D J A B K F I)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D state_type) (E state_type) (F Int) (G tx_type) ) 
    (=>
      (and
        (summary_4_function_g__41_46_0 C F A B G D E)
        (interface_0_C_46_0 F A B D)
        (= C 0)
      )
      (interface_0_C_46_0 F A B E)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D state_type) (E state_type) (F Int) (G tx_type) ) 
    (=>
      (and
        (summary_6_function_h__45_46_0 C F A B G D E)
        (interface_0_C_46_0 F A B D)
        (= C 0)
      )
      (interface_0_C_46_0 F A B E)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D state_type) (E state_type) (F Int) (G tx_type) ) 
    (=>
      (and
        (summary_constructor_2_C_46_0 C F A B G D E)
        (and (= C 0)
     (>= (tx.origin G) 0)
     (>= (tx.gasprice G) 0)
     (>= (msg.value G) 0)
     (>= (msg.sender G) 0)
     (>= (block.timestamp G) 0)
     (>= (block.number G) 0)
     (>= (block.gaslimit G) 0)
     (>= (block.difficulty G) 0)
     (>= (block.coinbase G) 0)
     (>= (block.chainid G) 0)
     (>= (block.basefee G) 0)
     (<= (tx.origin G) 1461501637330902918203684832716283019655932542975)
     (<= (tx.gasprice G)
         115792089237316195423570985008687907853269984665640564039457584007913129639935)
     (<= (msg.value G)
         115792089237316195423570985008687907853269984665640564039457584007913129639935)
     (<= (msg.sender G) 1461501637330902918203684832716283019655932542975)
     (<= (block.timestamp G)
         115792089237316195423570985008687907853269984665640564039457584007913129639935)
     (<= (block.number G)
         115792089237316195423570985008687907853269984665640564039457584007913129639935)
     (<= (block.gaslimit G)
         115792089237316195423570985008687907853269984665640564039457584007913129639935)
     (<= (block.difficulty G)
         115792089237316195423570985008687907853269984665640564039457584007913129639935)
     (<= (block.coinbase G) 1461501637330902918203684832716283019655932542975)
     (<= (block.chainid G)
         115792089237316195423570985008687907853269984665640564039457584007913129639935)
     (<= (block.basefee G)
         115792089237316195423570985008687907853269984665640564039457584007913129639935)
     (= (msg.value G) 0))
      )
      (interface_0_C_46_0 F A B E)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D state_type) (E state_type) (F Int) (G tx_type) ) 
    (=>
      (and
        true
      )
      (block_14_function_h__45_46_0 C F A B G D E)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D state_type) (E state_type) (F Int) (G tx_type) ) 
    (=>
      (and
        (block_14_function_h__45_46_0 C F A B G D E)
        (and (= C 0) (= E D))
      )
      (block_15_h_44_46_0 C F A B G D E)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D state_type) (E state_type) (F Int) (G tx_type) ) 
    (=>
      (and
        (block_15_h_44_46_0 C F A B G D E)
        true
      )
      (block_16_return_function_h__45_46_0 C F A B G D E)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D state_type) (E state_type) (F Int) (G tx_type) ) 
    (=>
      (and
        (block_16_return_function_h__45_46_0 C F A B G D E)
        true
      )
      (summary_5_function_h__45_46_0 C F A B G D E)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D state_type) (E state_type) (F Int) (G tx_type) ) 
    (=>
      (and
        true
      )
      (block_17_function_h__45_46_0 C F A B G D E)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D Int) (E Int) (F state_type) (G state_type) (H state_type) (I state_type) (J Int) (K tx_type) ) 
    (=>
      (and
        (block_17_function_h__45_46_0 C J A B K F G)
        (summary_5_function_h__45_46_0 D J A B K H I)
        (let ((a!1 (= (select (bytes_tuple_accessor_array (msg.data K)) 3) 101))
      (a!2 (= (select (bytes_tuple_accessor_array (msg.data K)) 2) 211))
      (a!3 (= (select (bytes_tuple_accessor_array (msg.data K)) 1) 201))
      (a!4 (= (select (bytes_tuple_accessor_array (msg.data K)) 0) 184))
      (a!5 (>= (+ (select (balances G) J) E) 0))
      (a!6 (<= (+ (select (balances G) J) E)
               115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (a!7 (store (balances G) J (+ (select (balances G) J) E))))
  (and (= G F)
       a!1
       a!2
       a!3
       a!4
       (= (msg.sig K) 3100234597)
       (= C 0)
       (>= (tx.origin K) 0)
       (>= (tx.gasprice K) 0)
       (>= (msg.value K) 0)
       (>= (msg.sender K) 0)
       (>= (block.timestamp K) 0)
       (>= (block.number K) 0)
       (>= (block.gaslimit K) 0)
       (>= (block.difficulty K) 0)
       (>= (block.coinbase K) 0)
       (>= (block.chainid K) 0)
       (>= (block.basefee K) 0)
       (>= (bytes_tuple_accessor_length (msg.data K)) 4)
       a!5
       (>= E (msg.value K))
       (<= (tx.origin K) 1461501637330902918203684832716283019655932542975)
       (<= (tx.gasprice K)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (msg.value K)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (msg.sender K) 1461501637330902918203684832716283019655932542975)
       (<= (block.timestamp K)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.number K)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.gaslimit K)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.difficulty K)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.coinbase K) 1461501637330902918203684832716283019655932542975)
       (<= (block.chainid K)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.basefee K)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       a!6
       (= H (state_type a!7))))
      )
      (summary_6_function_h__45_46_0 D J A B K F I)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D state_type) (E state_type) (F Int) (G tx_type) ) 
    (=>
      (and
        (and (= C 0) (= E D))
      )
      (contract_initializer_entry_19_C_46_0 C F A B G D E)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D state_type) (E state_type) (F Int) (G tx_type) ) 
    (=>
      (and
        (contract_initializer_entry_19_C_46_0 C F A B G D E)
        true
      )
      (contract_initializer_after_init_20_C_46_0 C F A B G D E)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D state_type) (E state_type) (F Int) (G tx_type) ) 
    (=>
      (and
        (contract_initializer_after_init_20_C_46_0 C F A B G D E)
        true
      )
      (contract_initializer_18_C_46_0 C F A B G D E)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D state_type) (E state_type) (F Int) (G tx_type) ) 
    (=>
      (and
        (and (= C 0) (>= (select (balances E) F) (msg.value G)) (= E D))
      )
      (implicit_constructor_entry_21_C_46_0 C F A B G D E)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D Int) (E state_type) (F state_type) (G state_type) (H Int) (I tx_type) ) 
    (=>
      (and
        (implicit_constructor_entry_21_C_46_0 C H A B I E F)
        (contract_initializer_18_C_46_0 D H A B I F G)
        (not (<= D 0))
      )
      (summary_constructor_2_C_46_0 D H A B I E G)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D Int) (E state_type) (F state_type) (G state_type) (H Int) (I tx_type) ) 
    (=>
      (and
        (contract_initializer_18_C_46_0 D H A B I F G)
        (implicit_constructor_entry_21_C_46_0 C H A B I E F)
        (= D 0)
      )
      (summary_constructor_2_C_46_0 D H A B I E G)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D state_type) (E state_type) (F Int) (G tx_type) ) 
    (=>
      (and
        (summary_4_function_g__41_46_0 C F A B G D E)
        (interface_0_C_46_0 F A B D)
        (= C 2)
      )
      error_target_6_0
    )
  )
)
(assert
  (forall ( (CHC_COMP_UNUSED Bool) ) 
    (=>
      (and
        error_target_6_0
        true
      )
      false
    )
  )
)

(check-sat)
(exit)
