(set-logic HORN)

(declare-datatypes ((state_type 0)) (((state_type  (balances (Array Int Int))))))
(declare-datatypes ((abi_type 0)) (((abi_type ))))
(declare-datatypes ((bytes_tuple 0)) (((bytes_tuple  (bytes_tuple_accessor_array (Array Int Int)) (bytes_tuple_accessor_length Int)))))
(declare-datatypes ((ecrecover_input_type 0)) (((ecrecover_input_type  (hash Int) (v Int) (r Int) (s Int)))))
(declare-datatypes ((crypto_type 0)) (((crypto_type  (ecrecover (Array ecrecover_input_type Int)) (keccak256 (Array bytes_tuple Int)) (ripemd160 (Array bytes_tuple Int)) (sha256 (Array bytes_tuple Int))))))
(declare-datatypes ((tx_type 0)) (((tx_type  (block.basefee Int) (block.chainid Int) (block.coinbase Int) (block.difficulty Int) (block.gaslimit Int) (block.number Int) (block.timestamp Int) (blockhash (Array Int Int)) (msg.data bytes_tuple) (msg.sender Int) (msg.sig Int) (msg.value Int) (tx.gasprice Int) (tx.origin Int)))))

(declare-fun |block_7_return_function_f__43_44_0| ( Int Int abi_type crypto_type tx_type state_type Int state_type Int Int Int ) Bool)
(declare-fun |contract_initializer_after_init_14_C_44_0| ( Int Int abi_type crypto_type tx_type state_type state_type ) Bool)
(declare-fun |block_9_function_f__43_44_0| ( Int Int abi_type crypto_type tx_type state_type Int state_type Int Int Int ) Bool)
(declare-fun |interface_0_C_44_0| ( Int abi_type crypto_type state_type ) Bool)
(declare-fun |contract_initializer_entry_13_C_44_0| ( Int Int abi_type crypto_type tx_type state_type state_type ) Bool)
(declare-fun |error_target_5_0| ( ) Bool)
(declare-fun |block_6_f_42_44_0| ( Int Int abi_type crypto_type tx_type state_type Int state_type Int Int Int ) Bool)
(declare-fun |summary_3_function_f__43_44_0| ( Int Int abi_type crypto_type tx_type state_type Int state_type Int Int ) Bool)
(declare-fun |block_8_function_f__43_44_0| ( Int Int abi_type crypto_type tx_type state_type Int state_type Int Int Int ) Bool)
(declare-fun |summary_constructor_2_C_44_0| ( Int Int abi_type crypto_type tx_type state_type state_type ) Bool)
(declare-fun |summary_4_function_f__43_44_0| ( Int Int abi_type crypto_type tx_type state_type Int state_type Int Int ) Bool)
(declare-fun |contract_initializer_12_C_44_0| ( Int Int abi_type crypto_type tx_type state_type state_type ) Bool)
(declare-fun |block_5_function_f__43_44_0| ( Int Int abi_type crypto_type tx_type state_type Int state_type Int Int Int ) Bool)
(declare-fun |implicit_constructor_entry_15_C_44_0| ( Int Int abi_type crypto_type tx_type state_type state_type ) Bool)
(declare-fun |block_11_function_f__43_44_0| ( Int Int abi_type crypto_type tx_type state_type Int state_type Int Int Int ) Bool)

(assert
  (forall ( (A Int) (B abi_type) (C crypto_type) (D Int) (E state_type) (F state_type) (G Int) (H tx_type) (I Int) (J Int) (K Int) ) 
    (=>
      (and
        true
      )
      (block_5_function_f__43_44_0 D G B C H E I F J A K)
    )
  )
)
(assert
  (forall ( (A Int) (B abi_type) (C crypto_type) (D Int) (E state_type) (F state_type) (G Int) (H tx_type) (I Int) (J Int) (K Int) ) 
    (=>
      (and
        (block_5_function_f__43_44_0 D G B C H E I F J A K)
        (and (= D 0) (= J I) (= F E))
      )
      (block_6_f_42_44_0 D G B C H E I F J A K)
    )
  )
)
(assert
  (forall ( (A Int) (B abi_type) (C crypto_type) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Bool) (N Int) (O Int) (P Int) (Q Int) (R Int) (S state_type) (T state_type) (U Int) (V tx_type) (W Int) (X Int) (Y Int) (Z Int) (A1 Int) ) 
    (=>
      (and
        (block_6_f_42_44_0 D U B C V S W T X A Z)
        (let ((a!1 (and (<= (+ G (* (- 1) H)) 255) (<= 0 (+ G (* (- 1) H))))))
(let ((a!2 (= I (ite a!1 (+ G (* (- 1) H)) Q))))
  (and (= (+ G (* (- 1) H)) (+ Q (* 256 R)))
       (= K A1)
       (= A 0)
       (= O 0)
       (= L 255)
       (= J I)
       a!2
       (= H 1)
       (= G Y)
       (= F Z)
       (= E 1)
       (= Y P)
       (= N X)
       (= A1 J)
       (= P O)
       (= Z 0)
       (>= K 0)
       (>= Q 0)
       (>= N 0)
       (>= P 0)
       (>= X 0)
       (<= K 255)
       (<= Q 255)
       (<= N 255)
       (<= P 255)
       (<= X 255)
       (not M)
       (= M (= K L)))))
      )
      (block_8_function_f__43_44_0 E U B C V S W T Y A A1)
    )
  )
)
(assert
  (forall ( (A Int) (B abi_type) (C crypto_type) (D Int) (E state_type) (F state_type) (G Int) (H tx_type) (I Int) (J Int) (K Int) ) 
    (=>
      (and
        (block_8_function_f__43_44_0 D G B C H E I F J A K)
        true
      )
      (summary_3_function_f__43_44_0 D G B C H E I F J A)
    )
  )
)
(assert
  (forall ( (A Int) (B abi_type) (C crypto_type) (D Int) (E state_type) (F state_type) (G Int) (H tx_type) (I Int) (J Int) (K Int) ) 
    (=>
      (and
        (block_9_function_f__43_44_0 D G B C H E I F J A K)
        true
      )
      (summary_3_function_f__43_44_0 D G B C H E I F J A)
    )
  )
)
(assert
  (forall ( (A Int) (B abi_type) (C crypto_type) (D Int) (E state_type) (F state_type) (G Int) (H tx_type) (I Int) (J Int) (K Int) ) 
    (=>
      (and
        (block_7_return_function_f__43_44_0 D G B C H E I F J A K)
        true
      )
      (summary_3_function_f__43_44_0 D G B C H E I F J A)
    )
  )
)
(assert
  (forall ( (A Int) (B abi_type) (C crypto_type) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Bool) (O Int) (P Int) (Q Int) (R Int) (S Int) (T Int) (U Int) (V Bool) (W Int) (X Int) (Y Int) (Z Int) (A1 Int) (B1 Int) (C1 Int) (D1 state_type) (E1 state_type) (F1 Int) (G1 tx_type) (H1 Int) (I1 Int) (J1 Int) (K1 Int) (L1 Int) (M1 Int) ) 
    (=>
      (and
        (block_6_f_42_44_0 D F1 B C G1 D1 H1 E1 I1 A K1)
        (let ((a!1 (and (<= (+ H (* (- 1) I)) 255) (<= 0 (+ H (* (- 1) I)))))
      (a!3 (and (<= (+ P (* (- 1) Q)) 255) (<= 0 (+ P (* (- 1) Q))))))
(let ((a!2 (= J (ite a!1 (+ H (* (- 1) I)) Z)))
      (a!4 (= R (ite a!3 (+ P (* (- 1) Q)) A1))))
  (and (= N (= L M))
       (= (+ H (* (- 1) I)) (+ Z (* 256 B1)))
       (= (+ P (* (- 1) Q)) (+ A1 (* 256 C1)))
       (= L L1)
       (= A 0)
       (= W I1)
       (= M 255)
       a!2
       (= I 1)
       (= H J1)
       (= G K1)
       (= F 3)
       (= E D)
       (= Y X)
       (= X 0)
       (= U 1)
       (= T M1)
       (= S R)
       a!4
       (= Q 255)
       (= P J1)
       (= O L1)
       (= K1 0)
       (= K J)
       (= M1 S)
       (= L1 K)
       (= J1 Y)
       (>= L 0)
       (>= W 0)
       (>= I1 0)
       (>= A1 0)
       (>= Y 0)
       (>= T 0)
       (>= Z 0)
       (<= L 255)
       (<= W 255)
       (<= I1 255)
       (<= A1 255)
       (<= Y 255)
       (<= T 255)
       (<= Z 255)
       (not V)
       (= V (= T U)))))
      )
      (block_9_function_f__43_44_0 F F1 B C G1 D1 H1 E1 J1 A M1)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C abi_type) (D crypto_type) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Int) (O Bool) (P Int) (Q Int) (R Int) (S Int) (T Int) (U Int) (V Int) (W Bool) (X Int) (Y Int) (Z Int) (A1 Int) (B1 Int) (C1 Int) (D1 Int) (E1 Int) (F1 state_type) (G1 state_type) (H1 Int) (I1 tx_type) (J1 Int) (K1 Int) (L1 Int) (M1 Int) (N1 Int) (O1 Int) ) 
    (=>
      (and
        (block_6_f_42_44_0 E H1 C D I1 F1 J1 G1 K1 A M1)
        (let ((a!1 (and (<= (+ I (* (- 1) J)) 255) (<= 0 (+ I (* (- 1) J)))))
      (a!3 (and (<= (+ Q (* (- 1) R)) 255) (<= 0 (+ Q (* (- 1) R))))))
(let ((a!2 (= K (ite a!1 (+ I (* (- 1) J)) B1)))
      (a!4 (= S (ite a!3 (+ Q (* (- 1) R)) C1))))
  (and (= W (= U V))
       (= (+ I (* (- 1) J)) (+ B1 (* 256 D1)))
       (= (+ Q (* (- 1) R)) (+ C1 (* 256 E1)))
       (= B X)
       (= N 255)
       (= Y K1)
       (= L K)
       a!2
       (= J 1)
       (= I L1)
       (= H M1)
       (= G F)
       (= F E)
       (= A 0)
       (= A1 Z)
       (= Z 0)
       (= X O1)
       (= V 1)
       (= U O1)
       (= T S)
       a!4
       (= R 255)
       (= Q L1)
       (= P N1)
       (= M1 0)
       (= M N1)
       (= O1 T)
       (= N1 L)
       (= L1 A1)
       (>= Y 0)
       (>= K1 0)
       (>= C1 0)
       (>= A1 0)
       (>= X 0)
       (>= U 0)
       (>= M 0)
       (>= B1 0)
       (<= Y 255)
       (<= K1 255)
       (<= C1 255)
       (<= A1 255)
       (<= X 255)
       (<= U 255)
       (<= M 255)
       (<= B1 255)
       (= O (= M N)))))
      )
      (block_7_return_function_f__43_44_0 G H1 C D I1 F1 J1 G1 L1 B O1)
    )
  )
)
(assert
  (forall ( (A Int) (B abi_type) (C crypto_type) (D Int) (E state_type) (F state_type) (G Int) (H tx_type) (I Int) (J Int) (K Int) ) 
    (=>
      (and
        true
      )
      (block_11_function_f__43_44_0 D G B C H E I F J A K)
    )
  )
)
(assert
  (forall ( (A Int) (B abi_type) (C crypto_type) (D Int) (E Int) (F Int) (G state_type) (H state_type) (I state_type) (J state_type) (K Int) (L tx_type) (M Int) (N Int) (O Int) (P Int) ) 
    (=>
      (and
        (block_11_function_f__43_44_0 D K B C L G M H N A P)
        (summary_3_function_f__43_44_0 E K B C L I N J O A)
        (let ((a!1 (= (select (bytes_tuple_accessor_array (msg.data L)) 2) 212))
      (a!2 (= (select (bytes_tuple_accessor_array (msg.data L)) 3) 52))
      (a!3 (= (select (bytes_tuple_accessor_array (msg.data L)) 1) 32))
      (a!4 (= (select (bytes_tuple_accessor_array (msg.data L)) 0) 49))
      (a!5 (>= (+ (select (balances H) K) F) 0))
      (a!6 (<= (+ (select (balances H) K) F)
               115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (a!7 (store (balances H) K (+ (select (balances H) K) F))))
  (and (= H G)
       a!1
       a!2
       a!3
       a!4
       (= (msg.value L) 0)
       (= (msg.sig L) 824235060)
       (= D 0)
       (= N M)
       (>= (tx.origin L) 0)
       (>= (tx.gasprice L) 0)
       (>= (msg.value L) 0)
       (>= (msg.sender L) 0)
       (>= (block.timestamp L) 0)
       (>= (block.number L) 0)
       (>= (block.gaslimit L) 0)
       (>= (block.difficulty L) 0)
       (>= (block.coinbase L) 0)
       (>= (block.chainid L) 0)
       (>= (block.basefee L) 0)
       (>= (bytes_tuple_accessor_length (msg.data L)) 4)
       a!5
       (>= F (msg.value L))
       (<= (tx.origin L) 1461501637330902918203684832716283019655932542975)
       (<= (tx.gasprice L)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (msg.value L)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (msg.sender L) 1461501637330902918203684832716283019655932542975)
       (<= (block.timestamp L)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.number L)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.gaslimit L)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.difficulty L)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.coinbase L) 1461501637330902918203684832716283019655932542975)
       (<= (block.chainid L)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.basefee L)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       a!6
       (= I (state_type a!7))))
      )
      (summary_4_function_f__43_44_0 E K B C L G M J O A)
    )
  )
)
(assert
  (forall ( (A Int) (B abi_type) (C crypto_type) (D Int) (E state_type) (F state_type) (G Int) (H tx_type) (I Int) (J Int) ) 
    (=>
      (and
        (summary_4_function_f__43_44_0 D G B C H E I F J A)
        (interface_0_C_44_0 G B C E)
        (= D 0)
      )
      (interface_0_C_44_0 G B C F)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D state_type) (E state_type) (F Int) (G tx_type) ) 
    (=>
      (and
        (summary_constructor_2_C_44_0 C F A B G D E)
        (and (= C 0)
     (>= (tx.origin G) 0)
     (>= (tx.gasprice G) 0)
     (>= (msg.value G) 0)
     (>= (msg.sender G) 0)
     (>= (block.timestamp G) 0)
     (>= (block.number G) 0)
     (>= (block.gaslimit G) 0)
     (>= (block.difficulty G) 0)
     (>= (block.coinbase G) 0)
     (>= (block.chainid G) 0)
     (>= (block.basefee G) 0)
     (<= (tx.origin G) 1461501637330902918203684832716283019655932542975)
     (<= (tx.gasprice G)
         115792089237316195423570985008687907853269984665640564039457584007913129639935)
     (<= (msg.value G)
         115792089237316195423570985008687907853269984665640564039457584007913129639935)
     (<= (msg.sender G) 1461501637330902918203684832716283019655932542975)
     (<= (block.timestamp G)
         115792089237316195423570985008687907853269984665640564039457584007913129639935)
     (<= (block.number G)
         115792089237316195423570985008687907853269984665640564039457584007913129639935)
     (<= (block.gaslimit G)
         115792089237316195423570985008687907853269984665640564039457584007913129639935)
     (<= (block.difficulty G)
         115792089237316195423570985008687907853269984665640564039457584007913129639935)
     (<= (block.coinbase G) 1461501637330902918203684832716283019655932542975)
     (<= (block.chainid G)
         115792089237316195423570985008687907853269984665640564039457584007913129639935)
     (<= (block.basefee G)
         115792089237316195423570985008687907853269984665640564039457584007913129639935)
     (= (msg.value G) 0))
      )
      (interface_0_C_44_0 F A B E)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D state_type) (E state_type) (F Int) (G tx_type) ) 
    (=>
      (and
        (and (= C 0) (= E D))
      )
      (contract_initializer_entry_13_C_44_0 C F A B G D E)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D state_type) (E state_type) (F Int) (G tx_type) ) 
    (=>
      (and
        (contract_initializer_entry_13_C_44_0 C F A B G D E)
        true
      )
      (contract_initializer_after_init_14_C_44_0 C F A B G D E)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D state_type) (E state_type) (F Int) (G tx_type) ) 
    (=>
      (and
        (contract_initializer_after_init_14_C_44_0 C F A B G D E)
        true
      )
      (contract_initializer_12_C_44_0 C F A B G D E)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D state_type) (E state_type) (F Int) (G tx_type) ) 
    (=>
      (and
        (and (= C 0) (>= (select (balances E) F) (msg.value G)) (= E D))
      )
      (implicit_constructor_entry_15_C_44_0 C F A B G D E)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D Int) (E state_type) (F state_type) (G state_type) (H Int) (I tx_type) ) 
    (=>
      (and
        (implicit_constructor_entry_15_C_44_0 C H A B I E F)
        (contract_initializer_12_C_44_0 D H A B I F G)
        (not (<= D 0))
      )
      (summary_constructor_2_C_44_0 D H A B I E G)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D Int) (E state_type) (F state_type) (G state_type) (H Int) (I tx_type) ) 
    (=>
      (and
        (contract_initializer_12_C_44_0 D H A B I F G)
        (implicit_constructor_entry_15_C_44_0 C H A B I E F)
        (= D 0)
      )
      (summary_constructor_2_C_44_0 D H A B I E G)
    )
  )
)
(assert
  (forall ( (A Int) (B abi_type) (C crypto_type) (D Int) (E state_type) (F state_type) (G Int) (H tx_type) (I Int) (J Int) ) 
    (=>
      (and
        (summary_4_function_f__43_44_0 D G B C H E I F J A)
        (interface_0_C_44_0 G B C E)
        (= D 1)
      )
      error_target_5_0
    )
  )
)
(assert
  (forall ( (CHC_COMP_UNUSED Bool) ) 
    (=>
      (and
        error_target_5_0
        true
      )
      false
    )
  )
)

(check-sat)
(exit)
