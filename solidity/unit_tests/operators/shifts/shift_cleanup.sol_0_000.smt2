(set-logic HORN)

(declare-datatypes ((state_type 0)) (((state_type  (balances (Array Int Int))))))
(declare-datatypes ((abi_type 0)) (((abi_type ))))
(declare-datatypes ((bytes_tuple 0)) (((bytes_tuple  (bytes_tuple_accessor_array (Array Int Int)) (bytes_tuple_accessor_length Int)))))
(declare-datatypes ((ecrecover_input_type 0)) (((ecrecover_input_type  (hash Int) (v Int) (r Int) (s Int)))))
(declare-datatypes ((crypto_type 0)) (((crypto_type  (ecrecover (Array ecrecover_input_type Int)) (keccak256 (Array bytes_tuple Int)) (ripemd160 (Array bytes_tuple Int)) (sha256 (Array bytes_tuple Int))))))
(declare-datatypes ((tx_type 0)) (((tx_type  (block.basefee Int) (block.chainid Int) (block.coinbase Int) (block.difficulty Int) (block.gaslimit Int) (block.number Int) (block.timestamp Int) (blockhash (Array Int Int)) (msg.data bytes_tuple) (msg.sender Int) (msg.sig Int) (msg.value Int) (tx.gasprice Int) (tx.origin Int)))))

(declare-fun |block_5_function_f__39_40_0| ( Int Int abi_type crypto_type tx_type state_type state_type Int ) Bool)
(declare-fun |contract_initializer_entry_12_C_40_0| ( Int Int abi_type crypto_type tx_type state_type state_type ) Bool)
(declare-fun |block_10_function_f__39_40_0| ( Int Int abi_type crypto_type tx_type state_type state_type Int ) Bool)
(declare-fun |summary_4_function_f__39_40_0| ( Int Int abi_type crypto_type tx_type state_type state_type Int ) Bool)
(declare-fun |block_7_return_function_f__39_40_0| ( Int Int abi_type crypto_type tx_type state_type state_type Int ) Bool)
(declare-fun |summary_3_function_f__39_40_0| ( Int Int abi_type crypto_type tx_type state_type state_type Int ) Bool)
(declare-fun |contract_initializer_11_C_40_0| ( Int Int abi_type crypto_type tx_type state_type state_type ) Bool)
(declare-fun |block_8_function_f__39_40_0| ( Int Int abi_type crypto_type tx_type state_type state_type Int ) Bool)
(declare-fun |block_9_function_f__39_40_0| ( Int Int abi_type crypto_type tx_type state_type state_type Int ) Bool)
(declare-fun |implicit_constructor_entry_14_C_40_0| ( Int Int abi_type crypto_type tx_type state_type state_type ) Bool)
(declare-fun |block_6_f_38_40_0| ( Int Int abi_type crypto_type tx_type state_type state_type Int ) Bool)
(declare-fun |summary_constructor_2_C_40_0| ( Int Int abi_type crypto_type tx_type state_type state_type ) Bool)
(declare-fun |interface_0_C_40_0| ( Int abi_type crypto_type state_type ) Bool)
(declare-fun |contract_initializer_after_init_13_C_40_0| ( Int Int abi_type crypto_type tx_type state_type state_type ) Bool)
(declare-fun |error_target_4_0| ( ) Bool)

(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D state_type) (E state_type) (F Int) (G tx_type) (H Int) ) 
    (=>
      (and
        true
      )
      (block_5_function_f__39_40_0 C F A B G D E H)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D state_type) (E state_type) (F Int) (G tx_type) (H Int) ) 
    (=>
      (and
        (block_5_function_f__39_40_0 C F A B G D E H)
        (and (= C 0) (= E D))
      )
      (block_6_f_38_40_0 C F A B G D E H)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Int) (O Int) (P Int) (Q Int) (R Int) (S Bool) (T Int) (U Int) (V Int) (W Int) (X Int) (Y Int) (Z state_type) (A1 state_type) (B1 Int) (C1 tx_type) (D1 Int) (E1 Int) (F1 Int) (G1 Int) (H1 Int) ) 
    (=>
      (and
        (block_6_f_38_40_0 C B1 A B C1 Z A1 D1)
        (let ((a!1 (ite (>= M 0)
                ((_ int_to_bv 16) M)
                (bvmul #xffff ((_ int_to_bv 16) (* (- 1) M)))))
      (a!2 (ite (>= N 0)
                ((_ int_to_bv 16) N)
                (bvmul #xffff ((_ int_to_bv 16) (* (- 1) N)))))
      (a!3 (ite (>= H 0)
                ((_ int_to_bv 16) H)
                (bvmul #xffff ((_ int_to_bv 16) (* (- 1) H)))))
      (a!4 (ite (>= I 0)
                ((_ int_to_bv 16) I)
                (bvmul #xffff ((_ int_to_bv 16) (* (- 1) I)))))
      (a!5 (ite (and (<= (+ E1 E) 65535) (<= 0 (+ E1 E))) (+ E1 E) X)))
  (and (= (+ E1 E) (+ X (* 65536 Y)))
       (= Q H1)
       (= D1 0)
       (= W E1)
       (= V U)
       (= U 65535)
       (= T D1)
       (= R 0)
       (= P O)
       (= O (ubv_to_int (bvlshr a!1 a!2)))
       (= N 16)
       (= M G1)
       (= L G1)
       (= K J)
       (= J (ubv_to_int (bvshl a!3 a!4)))
       (= I 8)
       (= H F1)
       (= G F1)
       (= F a!5)
       (= E 32)
       (= D 1)
       (= H1 P)
       (= F1 F)
       (= G1 K)
       (= E1 V)
       (>= X 0)
       (>= Q 0)
       (<= X 65535)
       (<= Q 65535)
       (not S)
       (= S (= Q R))))
      )
      (block_8_function_f__39_40_0 D B1 A B C1 Z A1 H1)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D state_type) (E state_type) (F Int) (G tx_type) (H Int) ) 
    (=>
      (and
        (block_8_function_f__39_40_0 C F A B G D E H)
        true
      )
      (summary_3_function_f__39_40_0 C F A B G D E H)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D state_type) (E state_type) (F Int) (G tx_type) (H Int) ) 
    (=>
      (and
        (block_9_function_f__39_40_0 C F A B G D E H)
        true
      )
      (summary_3_function_f__39_40_0 C F A B G D E H)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D state_type) (E state_type) (F Int) (G tx_type) (H Int) ) 
    (=>
      (and
        (block_7_return_function_f__39_40_0 C F A B G D E H)
        true
      )
      (summary_3_function_f__39_40_0 C F A B G D E H)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Int) (O Int) (P Int) (Q Int) (R Int) (S Int) (T Bool) (U Int) (V Int) (W Bool) (X Int) (Y Int) (Z Int) (A1 Int) (B1 Int) (C1 Int) (D1 state_type) (E1 state_type) (F1 Int) (G1 tx_type) (H1 Int) (I1 Int) (J1 Int) (K1 Int) (L1 Int) ) 
    (=>
      (and
        (block_6_f_38_40_0 C F1 A B G1 D1 E1 H1)
        (let ((a!1 (ite (>= N 0)
                ((_ int_to_bv 16) N)
                (bvmul #xffff ((_ int_to_bv 16) (* (- 1) N)))))
      (a!2 (ite (>= O 0)
                ((_ int_to_bv 16) O)
                (bvmul #xffff ((_ int_to_bv 16) (* (- 1) O)))))
      (a!3 (ite (>= I 0)
                ((_ int_to_bv 16) I)
                (bvmul #xffff ((_ int_to_bv 16) (* (- 1) I)))))
      (a!4 (ite (>= J 0)
                ((_ int_to_bv 16) J)
                (bvmul #xffff ((_ int_to_bv 16) (* (- 1) J)))))
      (a!5 (ite (and (<= (+ I1 F) 65535) (<= 0 (+ I1 F))) (+ I1 F) B1)))
  (and (= W (= U V))
       (= (+ I1 F) (+ B1 (* 65536 C1)))
       (= U L1)
       (= D C)
       (= H1 0)
       (= A1 I1)
       (= Z Y)
       (= Y 65535)
       (= X H1)
       (= V 10)
       (= S 0)
       (= R L1)
       (= Q P)
       (= P (ubv_to_int (bvlshr a!1 a!2)))
       (= O 16)
       (= N K1)
       (= M K1)
       (= L K)
       (= K (ubv_to_int (bvshl a!3 a!4)))
       (= J 8)
       (= I J1)
       (= H J1)
       (= G a!5)
       (= F 32)
       (= E 2)
       (= L1 Q)
       (= J1 G)
       (= K1 L)
       (= I1 Z)
       (>= B1 0)
       (>= U 0)
       (>= R 0)
       (<= B1 65535)
       (<= U 65535)
       (<= R 65535)
       (not W)
       (= T (= R S))))
      )
      (block_9_function_f__39_40_0 E F1 A B G1 D1 E1 L1)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Int) (O Int) (P Int) (Q Int) (R Int) (S Int) (T Bool) (U Int) (V Int) (W Bool) (X Int) (Y Int) (Z Int) (A1 Int) (B1 Int) (C1 Int) (D1 state_type) (E1 state_type) (F1 Int) (G1 tx_type) (H1 Int) (I1 Int) (J1 Int) (K1 Int) (L1 Int) ) 
    (=>
      (and
        (block_6_f_38_40_0 C F1 A B G1 D1 E1 H1)
        (let ((a!1 (ite (>= N 0)
                ((_ int_to_bv 16) N)
                (bvmul #xffff ((_ int_to_bv 16) (* (- 1) N)))))
      (a!2 (ite (>= O 0)
                ((_ int_to_bv 16) O)
                (bvmul #xffff ((_ int_to_bv 16) (* (- 1) O)))))
      (a!3 (ite (>= I 0)
                ((_ int_to_bv 16) I)
                (bvmul #xffff ((_ int_to_bv 16) (* (- 1) I)))))
      (a!4 (ite (>= J 0)
                ((_ int_to_bv 16) J)
                (bvmul #xffff ((_ int_to_bv 16) (* (- 1) J)))))
      (a!5 (ite (and (<= (+ I1 F) 65535) (<= 0 (+ I1 F))) (+ I1 F) B1)))
  (and (= W (= U V))
       (= (+ I1 F) (+ B1 (* 65536 C1)))
       (= U L1)
       (= D C)
       (= H1 0)
       (= A1 I1)
       (= Z Y)
       (= Y 65535)
       (= X H1)
       (= V 10)
       (= S 0)
       (= R L1)
       (= Q P)
       (= P (ubv_to_int (bvlshr a!1 a!2)))
       (= O 16)
       (= N K1)
       (= M K1)
       (= L K)
       (= K (ubv_to_int (bvshl a!3 a!4)))
       (= J 8)
       (= I J1)
       (= H J1)
       (= G a!5)
       (= F 32)
       (= E D)
       (= L1 Q)
       (= J1 G)
       (= K1 L)
       (= I1 Z)
       (>= B1 0)
       (>= U 0)
       (>= R 0)
       (<= B1 65535)
       (<= U 65535)
       (<= R 65535)
       (= T (= R S))))
      )
      (block_7_return_function_f__39_40_0 E F1 A B G1 D1 E1 L1)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D state_type) (E state_type) (F Int) (G tx_type) (H Int) ) 
    (=>
      (and
        true
      )
      (block_10_function_f__39_40_0 C F A B G D E H)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D Int) (E Int) (F state_type) (G state_type) (H state_type) (I state_type) (J Int) (K tx_type) (L Int) ) 
    (=>
      (and
        (block_10_function_f__39_40_0 C J A B K F G L)
        (summary_3_function_f__39_40_0 D J A B K H I L)
        (let ((a!1 (= (select (bytes_tuple_accessor_array (msg.data K)) 3) 240))
      (a!2 (= (select (bytes_tuple_accessor_array (msg.data K)) 2) 31))
      (a!3 (= (select (bytes_tuple_accessor_array (msg.data K)) 1) 18))
      (a!4 (= (select (bytes_tuple_accessor_array (msg.data K)) 0) 38))
      (a!5 (>= (+ (select (balances G) J) E) 0))
      (a!6 (<= (+ (select (balances G) J) E)
               115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (a!7 (store (balances G) J (+ (select (balances G) J) E))))
  (and (= G F)
       a!1
       a!2
       a!3
       a!4
       (= (msg.value K) 0)
       (= (msg.sig K) 638722032)
       (= C 0)
       (>= (tx.origin K) 0)
       (>= (tx.gasprice K) 0)
       (>= (msg.value K) 0)
       (>= (msg.sender K) 0)
       (>= (block.timestamp K) 0)
       (>= (block.number K) 0)
       (>= (block.gaslimit K) 0)
       (>= (block.difficulty K) 0)
       (>= (block.coinbase K) 0)
       (>= (block.chainid K) 0)
       (>= (block.basefee K) 0)
       (>= (bytes_tuple_accessor_length (msg.data K)) 4)
       a!5
       (>= E (msg.value K))
       (<= (tx.origin K) 1461501637330902918203684832716283019655932542975)
       (<= (tx.gasprice K)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (msg.value K)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (msg.sender K) 1461501637330902918203684832716283019655932542975)
       (<= (block.timestamp K)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.number K)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.gaslimit K)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.difficulty K)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.coinbase K) 1461501637330902918203684832716283019655932542975)
       (<= (block.chainid K)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.basefee K)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       a!6
       (= H (state_type a!7))))
      )
      (summary_4_function_f__39_40_0 D J A B K F I L)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D state_type) (E state_type) (F Int) (G tx_type) (H Int) ) 
    (=>
      (and
        (summary_4_function_f__39_40_0 C F A B G D E H)
        (interface_0_C_40_0 F A B D)
        (= C 0)
      )
      (interface_0_C_40_0 F A B E)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D state_type) (E state_type) (F Int) (G tx_type) ) 
    (=>
      (and
        (summary_constructor_2_C_40_0 C F A B G D E)
        (and (= C 0)
     (>= (tx.origin G) 0)
     (>= (tx.gasprice G) 0)
     (>= (msg.value G) 0)
     (>= (msg.sender G) 0)
     (>= (block.timestamp G) 0)
     (>= (block.number G) 0)
     (>= (block.gaslimit G) 0)
     (>= (block.difficulty G) 0)
     (>= (block.coinbase G) 0)
     (>= (block.chainid G) 0)
     (>= (block.basefee G) 0)
     (<= (tx.origin G) 1461501637330902918203684832716283019655932542975)
     (<= (tx.gasprice G)
         115792089237316195423570985008687907853269984665640564039457584007913129639935)
     (<= (msg.value G)
         115792089237316195423570985008687907853269984665640564039457584007913129639935)
     (<= (msg.sender G) 1461501637330902918203684832716283019655932542975)
     (<= (block.timestamp G)
         115792089237316195423570985008687907853269984665640564039457584007913129639935)
     (<= (block.number G)
         115792089237316195423570985008687907853269984665640564039457584007913129639935)
     (<= (block.gaslimit G)
         115792089237316195423570985008687907853269984665640564039457584007913129639935)
     (<= (block.difficulty G)
         115792089237316195423570985008687907853269984665640564039457584007913129639935)
     (<= (block.coinbase G) 1461501637330902918203684832716283019655932542975)
     (<= (block.chainid G)
         115792089237316195423570985008687907853269984665640564039457584007913129639935)
     (<= (block.basefee G)
         115792089237316195423570985008687907853269984665640564039457584007913129639935)
     (= (msg.value G) 0))
      )
      (interface_0_C_40_0 F A B E)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D state_type) (E state_type) (F Int) (G tx_type) ) 
    (=>
      (and
        (and (= C 0) (= E D))
      )
      (contract_initializer_entry_12_C_40_0 C F A B G D E)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D state_type) (E state_type) (F Int) (G tx_type) ) 
    (=>
      (and
        (contract_initializer_entry_12_C_40_0 C F A B G D E)
        true
      )
      (contract_initializer_after_init_13_C_40_0 C F A B G D E)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D state_type) (E state_type) (F Int) (G tx_type) ) 
    (=>
      (and
        (contract_initializer_after_init_13_C_40_0 C F A B G D E)
        true
      )
      (contract_initializer_11_C_40_0 C F A B G D E)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D state_type) (E state_type) (F Int) (G tx_type) ) 
    (=>
      (and
        (and (= C 0) (>= (select (balances E) F) (msg.value G)) (= E D))
      )
      (implicit_constructor_entry_14_C_40_0 C F A B G D E)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D Int) (E state_type) (F state_type) (G state_type) (H Int) (I tx_type) ) 
    (=>
      (and
        (implicit_constructor_entry_14_C_40_0 C H A B I E F)
        (contract_initializer_11_C_40_0 D H A B I F G)
        (not (<= D 0))
      )
      (summary_constructor_2_C_40_0 D H A B I E G)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D Int) (E state_type) (F state_type) (G state_type) (H Int) (I tx_type) ) 
    (=>
      (and
        (contract_initializer_11_C_40_0 D H A B I F G)
        (implicit_constructor_entry_14_C_40_0 C H A B I E F)
        (= D 0)
      )
      (summary_constructor_2_C_40_0 D H A B I E G)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D state_type) (E state_type) (F Int) (G tx_type) (H Int) ) 
    (=>
      (and
        (summary_4_function_f__39_40_0 C F A B G D E H)
        (interface_0_C_40_0 F A B D)
        (= C 1)
      )
      error_target_4_0
    )
  )
)
(assert
  (forall ( (CHC_COMP_UNUSED Bool) ) 
    (=>
      (and
        error_target_4_0
        true
      )
      false
    )
  )
)

(check-sat)
(exit)
