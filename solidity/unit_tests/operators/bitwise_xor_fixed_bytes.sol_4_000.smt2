(set-logic HORN)

(declare-datatypes ((state_type 0)) (((state_type  (balances (Array Int Int))))))
(declare-datatypes ((abi_type 0)) (((abi_type ))))
(declare-datatypes ((bytes_tuple 0)) (((bytes_tuple  (bytes_tuple_accessor_array (Array Int Int)) (bytes_tuple_accessor_length Int)))))
(declare-datatypes ((ecrecover_input_type 0)) (((ecrecover_input_type  (hash Int) (v Int) (r Int) (s Int)))))
(declare-datatypes ((crypto_type 0)) (((crypto_type  (ecrecover (Array ecrecover_input_type Int)) (keccak256 (Array bytes_tuple Int)) (ripemd160 (Array bytes_tuple Int)) (sha256 (Array bytes_tuple Int))))))
(declare-datatypes ((tx_type 0)) (((tx_type  (block.basefee Int) (block.chainid Int) (block.coinbase Int) (block.difficulty Int) (block.gaslimit Int) (block.number Int) (block.timestamp Int) (blockhash (Array Int Int)) (msg.data bytes_tuple) (msg.sender Int) (msg.sig Int) (msg.value Int) (tx.gasprice Int) (tx.origin Int)))))

(declare-fun |summary_4_function_f3__40_41_0| ( Int Int abi_type crypto_type tx_type state_type state_type Int ) Bool)
(declare-fun |contract_initializer_after_init_17_Simp_41_0| ( Int Int abi_type crypto_type tx_type state_type state_type ) Bool)
(declare-fun |summary_3_function_f3__40_41_0| ( Int Int abi_type crypto_type tx_type state_type state_type Int ) Bool)
(declare-fun |block_8_function_f3__40_41_0| ( Int Int abi_type crypto_type tx_type state_type state_type Int bytes_tuple ) Bool)
(declare-fun |implicit_constructor_entry_18_Simp_41_0| ( Int Int abi_type crypto_type tx_type state_type state_type ) Bool)
(declare-fun |error_target_7_0| ( ) Bool)
(declare-fun |interface_0_Simp_41_0| ( Int abi_type crypto_type state_type ) Bool)
(declare-fun |contract_initializer_15_Simp_41_0| ( Int Int abi_type crypto_type tx_type state_type state_type ) Bool)
(declare-fun |block_9_function_f3__40_41_0| ( Int Int abi_type crypto_type tx_type state_type state_type Int bytes_tuple ) Bool)
(declare-fun |block_10_function_f3__40_41_0| ( Int Int abi_type crypto_type tx_type state_type state_type Int bytes_tuple ) Bool)
(declare-fun |block_7_return_function_f3__40_41_0| ( Int Int abi_type crypto_type tx_type state_type state_type Int bytes_tuple ) Bool)
(declare-fun |summary_constructor_2_Simp_41_0| ( Int Int abi_type crypto_type tx_type state_type state_type ) Bool)
(declare-fun |block_6_f3_39_41_0| ( Int Int abi_type crypto_type tx_type state_type state_type Int bytes_tuple ) Bool)
(declare-fun |block_14_function_f3__40_41_0| ( Int Int abi_type crypto_type tx_type state_type state_type Int bytes_tuple ) Bool)
(declare-fun |block_5_function_f3__40_41_0| ( Int Int abi_type crypto_type tx_type state_type state_type Int bytes_tuple ) Bool)
(declare-fun |contract_initializer_entry_16_Simp_41_0| ( Int Int abi_type crypto_type tx_type state_type state_type ) Bool)
(declare-fun |block_12_function_f3__40_41_0| ( Int Int abi_type crypto_type tx_type state_type state_type Int bytes_tuple ) Bool)
(declare-fun |block_11_function_f3__40_41_0| ( Int Int abi_type crypto_type tx_type state_type state_type Int bytes_tuple ) Bool)

(assert
  (forall ( (A Int) (B abi_type) (C crypto_type) (D Int) (E state_type) (F state_type) (G Int) (H tx_type) (I bytes_tuple) ) 
    (=>
      (and
        true
      )
      (block_5_function_f3__40_41_0 D G B C H E F A I)
    )
  )
)
(assert
  (forall ( (A Int) (B abi_type) (C crypto_type) (D Int) (E state_type) (F state_type) (G Int) (H tx_type) (I bytes_tuple) ) 
    (=>
      (and
        (block_5_function_f3__40_41_0 D G B C H E F A I)
        (and (= D 0) (= F E))
      )
      (block_6_f3_39_41_0 D G B C H E F A I)
    )
  )
)
(assert
  (forall ( (A Int) (B abi_type) (C crypto_type) (D Int) (E Int) (F bytes_tuple) (G Int) (H bytes_tuple) (I state_type) (J state_type) (K Int) (L tx_type) (M bytes_tuple) (N bytes_tuple) ) 
    (=>
      (and
        (block_6_f3_39_41_0 D K B C L I J A M)
        (and (= F N)
     (= N H)
     (= (select (bytes_tuple_accessor_array H) 1) 101)
     (= (select (bytes_tuple_accessor_array H) 2) 102)
     (= (select (bytes_tuple_accessor_array H) 0) 100)
     (= (bytes_tuple_accessor_length H) 3)
     (= G 0)
     (= A 0)
     (= E 1)
     (or (not (<= 0 G)) (>= G (bytes_tuple_accessor_length F)))
     (= M (bytes_tuple ((as const (Array Int Int)) 0) 0)))
      )
      (block_8_function_f3__40_41_0 E K B C L I J A N)
    )
  )
)
(assert
  (forall ( (A Int) (B abi_type) (C crypto_type) (D Int) (E state_type) (F state_type) (G Int) (H tx_type) (I bytes_tuple) ) 
    (=>
      (and
        (block_8_function_f3__40_41_0 D G B C H E F A I)
        true
      )
      (summary_3_function_f3__40_41_0 D G B C H E F A)
    )
  )
)
(assert
  (forall ( (A Int) (B abi_type) (C crypto_type) (D Int) (E state_type) (F state_type) (G Int) (H tx_type) (I bytes_tuple) ) 
    (=>
      (and
        (block_9_function_f3__40_41_0 D G B C H E F A I)
        true
      )
      (summary_3_function_f3__40_41_0 D G B C H E F A)
    )
  )
)
(assert
  (forall ( (A Int) (B abi_type) (C crypto_type) (D Int) (E state_type) (F state_type) (G Int) (H tx_type) (I bytes_tuple) ) 
    (=>
      (and
        (block_10_function_f3__40_41_0 D G B C H E F A I)
        true
      )
      (summary_3_function_f3__40_41_0 D G B C H E F A)
    )
  )
)
(assert
  (forall ( (A Int) (B abi_type) (C crypto_type) (D Int) (E state_type) (F state_type) (G Int) (H tx_type) (I bytes_tuple) ) 
    (=>
      (and
        (block_11_function_f3__40_41_0 D G B C H E F A I)
        true
      )
      (summary_3_function_f3__40_41_0 D G B C H E F A)
    )
  )
)
(assert
  (forall ( (A Int) (B abi_type) (C crypto_type) (D Int) (E state_type) (F state_type) (G Int) (H tx_type) (I bytes_tuple) ) 
    (=>
      (and
        (block_12_function_f3__40_41_0 D G B C H E F A I)
        true
      )
      (summary_3_function_f3__40_41_0 D G B C H E F A)
    )
  )
)
(assert
  (forall ( (A Int) (B abi_type) (C crypto_type) (D Int) (E state_type) (F state_type) (G Int) (H tx_type) (I bytes_tuple) ) 
    (=>
      (and
        (block_7_return_function_f3__40_41_0 D G B C H E F A I)
        true
      )
      (summary_3_function_f3__40_41_0 D G B C H E F A)
    )
  )
)
(assert
  (forall ( (A Int) (B abi_type) (C crypto_type) (D Int) (E Int) (F Int) (G bytes_tuple) (H Int) (I Int) (J bytes_tuple) (K Int) (L Int) (M Int) (N Bool) (O bytes_tuple) (P state_type) (Q state_type) (R Int) (S tx_type) (T bytes_tuple) (U bytes_tuple) ) 
    (=>
      (and
        (block_6_f3_39_41_0 D R B C S P Q A T)
        (let ((a!1 ((_ extract 7 7) (bvmul #xff ((_ int_to_bv 8) (* (- 1) I)))))
      (a!3 ((_ extract 6 5) (bvmul #xff ((_ int_to_bv 8) (* (- 1) I)))))
      (a!5 ((_ extract 4 3) (bvmul #xff ((_ int_to_bv 8) (* (- 1) I)))))
      (a!7 ((_ extract 2 2) (bvmul #xff ((_ int_to_bv 8) (* (- 1) I)))))
      (a!9 ((_ extract 1 1) (bvmul #xff ((_ int_to_bv 8) (* (- 1) I)))))
      (a!11 (ite (>= I 0)
                 ((_ extract 0 0) ((_ int_to_bv 8) I))
                 ((_ extract 0 0) ((_ int_to_bv 8) (* (- 1) I))))))
(let ((a!2 (ubv_to_int (ite (>= I 0) ((_ extract 7 7) ((_ int_to_bv 8) I)) a!1)))
      (a!4 (bvnot (ite (>= I 0) ((_ extract 6 5) ((_ int_to_bv 8) I)) a!3)))
      (a!6 (ubv_to_int (ite (>= I 0) ((_ extract 4 3) ((_ int_to_bv 8) I)) a!5)))
      (a!8 (bvnot (ite (>= I 0) ((_ extract 2 2) ((_ int_to_bv 8) I)) a!7)))
      (a!10 (ubv_to_int (ite (>= I 0) ((_ extract 1 1) ((_ int_to_bv 8) I)) a!9))))
(let ((a!12 (= K
               (+ (* 128 a!2)
                  (* 32 (ubv_to_int a!4))
                  (* 8 a!6)
                  (* 4 (ubv_to_int a!8))
                  (* 2 a!10)
                  (ubv_to_int (bvnot a!11))))))
  (and (= G U)
       (= T (bytes_tuple ((as const (Array Int Int)) 0) 0))
       (= U O)
       (= (select (bytes_tuple_accessor_array O) 1) 101)
       (= (select (bytes_tuple_accessor_array O) 2) 102)
       (= (select (bytes_tuple_accessor_array O) 0) 100)
       (= (select (bytes_tuple_accessor_array J) 0) 101)
       (= (bytes_tuple_accessor_length O) 3)
       (= (bytes_tuple_accessor_length J) 1)
       (= H 0)
       (= E D)
       (= A 0)
       a!12
       (= I (select (bytes_tuple_accessor_array U) H))
       (= F 2)
       (= M L)
       (= L 0)
       (>= K 0)
       (>= I 0)
       (>= M 0)
       (<= K 255)
       (<= I 255)
       (<= M 255)
       (not N)
       (not (= (= K M) N))))))
      )
      (block_9_function_f3__40_41_0 F R B C S P Q A U)
    )
  )
)
(assert
  (forall ( (A Int) (B abi_type) (C crypto_type) (D Int) (E Int) (F Int) (G Int) (H bytes_tuple) (I Int) (J Int) (K bytes_tuple) (L Int) (M Int) (N Int) (O Bool) (P bytes_tuple) (Q Int) (R bytes_tuple) (S state_type) (T state_type) (U Int) (V tx_type) (W bytes_tuple) (X bytes_tuple) ) 
    (=>
      (and
        (block_6_f3_39_41_0 D U B C V S T A W)
        (let ((a!1 ((_ extract 7 7) (bvmul #xff ((_ int_to_bv 8) (* (- 1) J)))))
      (a!3 ((_ extract 6 5) (bvmul #xff ((_ int_to_bv 8) (* (- 1) J)))))
      (a!5 ((_ extract 4 3) (bvmul #xff ((_ int_to_bv 8) (* (- 1) J)))))
      (a!7 ((_ extract 2 2) (bvmul #xff ((_ int_to_bv 8) (* (- 1) J)))))
      (a!9 ((_ extract 1 1) (bvmul #xff ((_ int_to_bv 8) (* (- 1) J)))))
      (a!11 (ite (>= J 0)
                 ((_ extract 0 0) ((_ int_to_bv 8) J))
                 ((_ extract 0 0) ((_ int_to_bv 8) (* (- 1) J))))))
(let ((a!2 (ubv_to_int (ite (>= J 0) ((_ extract 7 7) ((_ int_to_bv 8) J)) a!1)))
      (a!4 (bvnot (ite (>= J 0) ((_ extract 6 5) ((_ int_to_bv 8) J)) a!3)))
      (a!6 (ubv_to_int (ite (>= J 0) ((_ extract 4 3) ((_ int_to_bv 8) J)) a!5)))
      (a!8 (bvnot (ite (>= J 0) ((_ extract 2 2) ((_ int_to_bv 8) J)) a!7)))
      (a!10 (ubv_to_int (ite (>= J 0) ((_ extract 1 1) ((_ int_to_bv 8) J)) a!9))))
(let ((a!12 (= L
               (+ (* 128 a!2)
                  (* 32 (ubv_to_int a!4))
                  (* 8 a!6)
                  (* 4 (ubv_to_int a!8))
                  (* 2 a!10)
                  (ubv_to_int (bvnot a!11))))))
  (and (= H X)
       (= W (bytes_tuple ((as const (Array Int Int)) 0) 0))
       (= P X)
       (= X R)
       (= (select (bytes_tuple_accessor_array R) 1) 101)
       (= (select (bytes_tuple_accessor_array R) 2) 102)
       (= (select (bytes_tuple_accessor_array R) 0) 100)
       (= (select (bytes_tuple_accessor_array K) 0) 101)
       (= (bytes_tuple_accessor_length R) 3)
       (= (bytes_tuple_accessor_length K) 1)
       (= Q 1)
       (= A 0)
       (= N M)
       (= J (select (bytes_tuple_accessor_array X) I))
       (= G 3)
       (= F E)
       (= E D)
       a!12
       (= I 0)
       (= M 0)
       (>= N 0)
       (>= J 0)
       (>= L 0)
       (<= N 255)
       (<= J 255)
       (<= L 255)
       (or (not (<= 0 Q)) (>= Q (bytes_tuple_accessor_length P)))
       (not (= (= L N) O))))))
      )
      (block_10_function_f3__40_41_0 G U B C V S T A X)
    )
  )
)
(assert
  (forall ( (A Int) (B abi_type) (C crypto_type) (D Int) (E Int) (F Int) (G Int) (H Int) (I bytes_tuple) (J Int) (K Int) (L bytes_tuple) (M Int) (N Int) (O Int) (P Bool) (Q bytes_tuple) (R Int) (S Int) (T bytes_tuple) (U Int) (V Int) (W Int) (X Bool) (Y bytes_tuple) (Z state_type) (A1 state_type) (B1 Int) (C1 tx_type) (D1 bytes_tuple) (E1 bytes_tuple) ) 
    (=>
      (and
        (block_6_f3_39_41_0 D B1 B C C1 Z A1 A D1)
        (let ((a!1 ((_ extract 7 7) (bvmul #xff ((_ int_to_bv 8) (* (- 1) S)))))
      (a!3 ((_ extract 6 5) (bvmul #xff ((_ int_to_bv 8) (* (- 1) S)))))
      (a!5 ((_ extract 4 3) (bvmul #xff ((_ int_to_bv 8) (* (- 1) S)))))
      (a!7 ((_ extract 2 2) (bvmul #xff ((_ int_to_bv 8) (* (- 1) S)))))
      (a!9 ((_ extract 1 1) (bvmul #xff ((_ int_to_bv 8) (* (- 1) S)))))
      (a!11 (ite (>= S 0)
                 ((_ extract 0 0) ((_ int_to_bv 8) S))
                 ((_ extract 0 0) ((_ int_to_bv 8) (* (- 1) S)))))
      (a!13 ((_ extract 7 7) (bvmul #xff ((_ int_to_bv 8) (* (- 1) K)))))
      (a!15 ((_ extract 6 5) (bvmul #xff ((_ int_to_bv 8) (* (- 1) K)))))
      (a!17 ((_ extract 4 3) (bvmul #xff ((_ int_to_bv 8) (* (- 1) K)))))
      (a!19 ((_ extract 2 2) (bvmul #xff ((_ int_to_bv 8) (* (- 1) K)))))
      (a!21 ((_ extract 1 1) (bvmul #xff ((_ int_to_bv 8) (* (- 1) K)))))
      (a!23 (ite (>= K 0)
                 ((_ extract 0 0) ((_ int_to_bv 8) K))
                 ((_ extract 0 0) ((_ int_to_bv 8) (* (- 1) K))))))
(let ((a!2 (ubv_to_int (ite (>= S 0) ((_ extract 7 7) ((_ int_to_bv 8) S)) a!1)))
      (a!4 (bvnot (ite (>= S 0) ((_ extract 6 5) ((_ int_to_bv 8) S)) a!3)))
      (a!6 (ubv_to_int (ite (>= S 0) ((_ extract 4 3) ((_ int_to_bv 8) S)) a!5)))
      (a!8 (bvnot (ite (>= S 0) ((_ extract 2 2) ((_ int_to_bv 8) S)) a!7)))
      (a!10 (ubv_to_int (ite (>= S 0) ((_ extract 1 1) ((_ int_to_bv 8) S)) a!9)))
      (a!14 (ubv_to_int (ite (>= K 0)
                             ((_ extract 7 7) ((_ int_to_bv 8) K))
                             a!13)))
      (a!16 (bvnot (ite (>= K 0) ((_ extract 6 5) ((_ int_to_bv 8) K)) a!15)))
      (a!18 (ubv_to_int (ite (>= K 0)
                             ((_ extract 4 3) ((_ int_to_bv 8) K))
                             a!17)))
      (a!20 (bvnot (ite (>= K 0) ((_ extract 2 2) ((_ int_to_bv 8) K)) a!19)))
      (a!22 (ubv_to_int (ite (>= K 0)
                             ((_ extract 1 1) ((_ int_to_bv 8) K))
                             a!21))))
(let ((a!12 (= U
               (+ (* 128 a!2)
                  (* 32 (ubv_to_int a!4))
                  (* 8 a!6)
                  (* 4 (ubv_to_int a!8))
                  (* 2 a!10)
                  (ubv_to_int (bvnot a!11)))))
      (a!24 (= M
               (+ (* 128 a!14)
                  (* 32 (ubv_to_int a!16))
                  (* 8 a!18)
                  (* 4 (ubv_to_int a!20))
                  (* 2 a!22)
                  (ubv_to_int (bvnot a!23))))))
  (and (not (= (= M O) P))
       (= Q E1)
       (= I E1)
       (= D1 (bytes_tuple ((as const (Array Int Int)) 0) 0))
       (= E1 Y)
       (= (select (bytes_tuple_accessor_array Y) 1) 101)
       (= (select (bytes_tuple_accessor_array Y) 2) 102)
       (= (select (bytes_tuple_accessor_array Y) 0) 100)
       (= (select (bytes_tuple_accessor_array T) 0) 101)
       (= (select (bytes_tuple_accessor_array L) 0) 101)
       (= (bytes_tuple_accessor_length Y) 3)
       (= (bytes_tuple_accessor_length T) 1)
       (= (bytes_tuple_accessor_length L) 1)
       (= G F)
       (= A 0)
       (= H 4)
       (= E D)
       (= R 1)
       (= O N)
       (= K (select (bytes_tuple_accessor_array E1) J))
       (= J 0)
       (= F E)
       a!12
       (= N 0)
       a!24
       (= S (select (bytes_tuple_accessor_array E1) R))
       (= W V)
       (= V 0)
       (>= O 0)
       (>= K 0)
       (>= U 0)
       (>= M 0)
       (>= S 0)
       (>= W 0)
       (<= O 255)
       (<= K 255)
       (<= U 255)
       (<= M 255)
       (<= S 255)
       (<= W 255)
       (not X)
       (not (= (= U W) X))))))
      )
      (block_11_function_f3__40_41_0 H B1 B C C1 Z A1 A E1)
    )
  )
)
(assert
  (forall ( (A Int) (B abi_type) (C crypto_type) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J bytes_tuple) (K Int) (L Int) (M bytes_tuple) (N Int) (O Int) (P Int) (Q Bool) (R bytes_tuple) (S Int) (T Int) (U bytes_tuple) (V Int) (W Int) (X Int) (Y Bool) (Z bytes_tuple) (A1 Int) (B1 bytes_tuple) (C1 state_type) (D1 state_type) (E1 Int) (F1 tx_type) (G1 bytes_tuple) (H1 bytes_tuple) ) 
    (=>
      (and
        (block_6_f3_39_41_0 D E1 B C F1 C1 D1 A G1)
        (let ((a!1 ((_ extract 7 7) (bvmul #xff ((_ int_to_bv 8) (* (- 1) L)))))
      (a!3 ((_ extract 6 5) (bvmul #xff ((_ int_to_bv 8) (* (- 1) L)))))
      (a!5 ((_ extract 4 3) (bvmul #xff ((_ int_to_bv 8) (* (- 1) L)))))
      (a!7 ((_ extract 2 2) (bvmul #xff ((_ int_to_bv 8) (* (- 1) L)))))
      (a!9 ((_ extract 1 1) (bvmul #xff ((_ int_to_bv 8) (* (- 1) L)))))
      (a!11 (ite (>= L 0)
                 ((_ extract 0 0) ((_ int_to_bv 8) L))
                 ((_ extract 0 0) ((_ int_to_bv 8) (* (- 1) L)))))
      (a!13 ((_ extract 7 7) (bvmul #xff ((_ int_to_bv 8) (* (- 1) T)))))
      (a!15 ((_ extract 6 5) (bvmul #xff ((_ int_to_bv 8) (* (- 1) T)))))
      (a!17 ((_ extract 4 3) (bvmul #xff ((_ int_to_bv 8) (* (- 1) T)))))
      (a!19 ((_ extract 2 2) (bvmul #xff ((_ int_to_bv 8) (* (- 1) T)))))
      (a!21 ((_ extract 1 1) (bvmul #xff ((_ int_to_bv 8) (* (- 1) T)))))
      (a!23 (ite (>= T 0)
                 ((_ extract 0 0) ((_ int_to_bv 8) T))
                 ((_ extract 0 0) ((_ int_to_bv 8) (* (- 1) T))))))
(let ((a!2 (ubv_to_int (ite (>= L 0) ((_ extract 7 7) ((_ int_to_bv 8) L)) a!1)))
      (a!4 (bvnot (ite (>= L 0) ((_ extract 6 5) ((_ int_to_bv 8) L)) a!3)))
      (a!6 (ubv_to_int (ite (>= L 0) ((_ extract 4 3) ((_ int_to_bv 8) L)) a!5)))
      (a!8 (bvnot (ite (>= L 0) ((_ extract 2 2) ((_ int_to_bv 8) L)) a!7)))
      (a!10 (ubv_to_int (ite (>= L 0) ((_ extract 1 1) ((_ int_to_bv 8) L)) a!9)))
      (a!14 (ubv_to_int (ite (>= T 0)
                             ((_ extract 7 7) ((_ int_to_bv 8) T))
                             a!13)))
      (a!16 (bvnot (ite (>= T 0) ((_ extract 6 5) ((_ int_to_bv 8) T)) a!15)))
      (a!18 (ubv_to_int (ite (>= T 0)
                             ((_ extract 4 3) ((_ int_to_bv 8) T))
                             a!17)))
      (a!20 (bvnot (ite (>= T 0) ((_ extract 2 2) ((_ int_to_bv 8) T)) a!19)))
      (a!22 (ubv_to_int (ite (>= T 0)
                             ((_ extract 1 1) ((_ int_to_bv 8) T))
                             a!21))))
(let ((a!12 (= N
               (+ (* 128 a!2)
                  (* 32 (ubv_to_int a!4))
                  (* 8 a!6)
                  (* 4 (ubv_to_int a!8))
                  (* 2 a!10)
                  (ubv_to_int (bvnot a!11)))))
      (a!24 (= V
               (+ (* 128 a!14)
                  (* 32 (ubv_to_int a!16))
                  (* 8 a!18)
                  (* 4 (ubv_to_int a!20))
                  (* 2 a!22)
                  (ubv_to_int (bvnot a!23))))))
  (and (not (= (= V X) Y))
       (= J H1)
       (= R H1)
       (= G1 (bytes_tuple ((as const (Array Int Int)) 0) 0))
       (= Z H1)
       (= H1 B1)
       (= (select (bytes_tuple_accessor_array B1) 1) 101)
       (= (select (bytes_tuple_accessor_array B1) 2) 102)
       (= (select (bytes_tuple_accessor_array B1) 0) 100)
       (= (select (bytes_tuple_accessor_array M) 0) 101)
       (= (select (bytes_tuple_accessor_array U) 0) 101)
       (= (bytes_tuple_accessor_length B1) 3)
       (= (bytes_tuple_accessor_length M) 1)
       (= (bytes_tuple_accessor_length U) 1)
       (= A1 0)
       (= A 0)
       (= K 0)
       (= H G)
       (= G F)
       (= F E)
       (= E D)
       a!12
       (= I 5)
       (= X W)
       (= T (select (bytes_tuple_accessor_array H1) S))
       (= P O)
       (= O 0)
       (= L (select (bytes_tuple_accessor_array H1) K))
       a!24
       (= S 1)
       (= W 0)
       (>= N 0)
       (>= X 0)
       (>= T 0)
       (>= P 0)
       (>= L 0)
       (>= V 0)
       (<= N 255)
       (<= X 255)
       (<= T 255)
       (<= P 255)
       (<= L 255)
       (<= V 255)
       (or (not (<= 0 A1)) (>= A1 (bytes_tuple_accessor_length Z)))
       (not (= (= N P) Q))))))
      )
      (block_12_function_f3__40_41_0 I E1 B C F1 C1 D1 A H1)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C abi_type) (D crypto_type) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K bytes_tuple) (L Int) (M Int) (N bytes_tuple) (O Int) (P Int) (Q Int) (R Bool) (S bytes_tuple) (T Int) (U Int) (V bytes_tuple) (W Int) (X Int) (Y Int) (Z Bool) (A1 bytes_tuple) (B1 Int) (C1 Int) (D1 bytes_tuple) (E1 state_type) (F1 state_type) (G1 Int) (H1 tx_type) (I1 bytes_tuple) (J1 bytes_tuple) ) 
    (=>
      (and
        (block_6_f3_39_41_0 E G1 C D H1 E1 F1 A I1)
        (let ((a!1 ((_ extract 7 7) (bvmul #xff ((_ int_to_bv 8) (* (- 1) U)))))
      (a!3 ((_ extract 6 5) (bvmul #xff ((_ int_to_bv 8) (* (- 1) U)))))
      (a!5 ((_ extract 4 3) (bvmul #xff ((_ int_to_bv 8) (* (- 1) U)))))
      (a!7 ((_ extract 2 2) (bvmul #xff ((_ int_to_bv 8) (* (- 1) U)))))
      (a!9 ((_ extract 1 1) (bvmul #xff ((_ int_to_bv 8) (* (- 1) U)))))
      (a!11 (ite (>= U 0)
                 ((_ extract 0 0) ((_ int_to_bv 8) U))
                 ((_ extract 0 0) ((_ int_to_bv 8) (* (- 1) U)))))
      (a!13 ((_ extract 7 7) (bvmul #xff ((_ int_to_bv 8) (* (- 1) M)))))
      (a!15 ((_ extract 6 5) (bvmul #xff ((_ int_to_bv 8) (* (- 1) M)))))
      (a!17 ((_ extract 4 3) (bvmul #xff ((_ int_to_bv 8) (* (- 1) M)))))
      (a!19 ((_ extract 2 2) (bvmul #xff ((_ int_to_bv 8) (* (- 1) M)))))
      (a!21 ((_ extract 1 1) (bvmul #xff ((_ int_to_bv 8) (* (- 1) M)))))
      (a!23 (ite (>= M 0)
                 ((_ extract 0 0) ((_ int_to_bv 8) M))
                 ((_ extract 0 0) ((_ int_to_bv 8) (* (- 1) M))))))
(let ((a!2 (ubv_to_int (ite (>= U 0) ((_ extract 7 7) ((_ int_to_bv 8) U)) a!1)))
      (a!4 (bvnot (ite (>= U 0) ((_ extract 6 5) ((_ int_to_bv 8) U)) a!3)))
      (a!6 (ubv_to_int (ite (>= U 0) ((_ extract 4 3) ((_ int_to_bv 8) U)) a!5)))
      (a!8 (bvnot (ite (>= U 0) ((_ extract 2 2) ((_ int_to_bv 8) U)) a!7)))
      (a!10 (ubv_to_int (ite (>= U 0) ((_ extract 1 1) ((_ int_to_bv 8) U)) a!9)))
      (a!14 (ubv_to_int (ite (>= M 0)
                             ((_ extract 7 7) ((_ int_to_bv 8) M))
                             a!13)))
      (a!16 (bvnot (ite (>= M 0) ((_ extract 6 5) ((_ int_to_bv 8) M)) a!15)))
      (a!18 (ubv_to_int (ite (>= M 0)
                             ((_ extract 4 3) ((_ int_to_bv 8) M))
                             a!17)))
      (a!20 (bvnot (ite (>= M 0) ((_ extract 2 2) ((_ int_to_bv 8) M)) a!19)))
      (a!22 (ubv_to_int (ite (>= M 0)
                             ((_ extract 1 1) ((_ int_to_bv 8) M))
                             a!21))))
(let ((a!12 (= W
               (+ (* 128 a!2)
                  (* 32 (ubv_to_int a!4))
                  (* 8 a!6)
                  (* 4 (ubv_to_int a!8))
                  (* 2 a!10)
                  (ubv_to_int (bvnot a!11)))))
      (a!24 (= O
               (+ (* 128 a!14)
                  (* 32 (ubv_to_int a!16))
                  (* 8 a!18)
                  (* 4 (ubv_to_int a!20))
                  (* 2 a!22)
                  (ubv_to_int (bvnot a!23))))))
  (and (not (= (= O Q) R))
       (= K J1)
       (= S J1)
       (= A1 J1)
       (= I1 (bytes_tuple ((as const (Array Int Int)) 0) 0))
       (= J1 D1)
       (= (select (bytes_tuple_accessor_array V) 0) 101)
       (= (select (bytes_tuple_accessor_array N) 0) 101)
       (= (select (bytes_tuple_accessor_array D1) 1) 101)
       (= (select (bytes_tuple_accessor_array D1) 2) 102)
       (= (select (bytes_tuple_accessor_array D1) 0) 100)
       (= (bytes_tuple_accessor_length V) 1)
       (= (bytes_tuple_accessor_length N) 1)
       (= (bytes_tuple_accessor_length D1) 3)
       (= C1 (select (bytes_tuple_accessor_array J1) B1))
       (= B C1)
       (= L 0)
       (= F E)
       (= A 0)
       (= M (select (bytes_tuple_accessor_array J1) L))
       (= J I)
       (= I H)
       (= H G)
       (= G F)
       a!12
       (= T 1)
       (= P 0)
       a!24
       (= Q P)
       (= X 0)
       (= U (select (bytes_tuple_accessor_array J1) T))
       (= B1 0)
       (= Y X)
       (>= C1 0)
       (>= M 0)
       (>= W 0)
       (>= O 0)
       (>= Q 0)
       (>= U 0)
       (>= Y 0)
       (<= C1 255)
       (<= M 255)
       (<= W 255)
       (<= O 255)
       (<= Q 255)
       (<= U 255)
       (<= Y 255)
       (not (= (= W Y) Z))))))
      )
      (block_7_return_function_f3__40_41_0 J G1 C D H1 E1 F1 B J1)
    )
  )
)
(assert
  (forall ( (A Int) (B abi_type) (C crypto_type) (D Int) (E state_type) (F state_type) (G Int) (H tx_type) (I bytes_tuple) ) 
    (=>
      (and
        true
      )
      (block_14_function_f3__40_41_0 D G B C H E F A I)
    )
  )
)
(assert
  (forall ( (A Int) (B abi_type) (C crypto_type) (D Int) (E Int) (F Int) (G state_type) (H state_type) (I state_type) (J state_type) (K Int) (L tx_type) (M bytes_tuple) ) 
    (=>
      (and
        (block_14_function_f3__40_41_0 D K B C L G H A M)
        (summary_3_function_f3__40_41_0 E K B C L I J A)
        (let ((a!1 (store (balances H) K (+ (select (balances H) K) F)))
      (a!2 (= (select (bytes_tuple_accessor_array (msg.data L)) 3) 61))
      (a!3 (= (select (bytes_tuple_accessor_array (msg.data L)) 1) 240))
      (a!4 (= (select (bytes_tuple_accessor_array (msg.data L)) 2) 95))
      (a!5 (= (select (bytes_tuple_accessor_array (msg.data L)) 0) 170))
      (a!6 (>= (+ (select (balances H) K) F) 0))
      (a!7 (<= (+ (select (balances H) K) F)
               115792089237316195423570985008687907853269984665640564039457584007913129639935)))
  (and (= I (state_type a!1))
       a!2
       a!3
       a!4
       a!5
       (= (msg.value L) 0)
       (= (msg.sig L) 2867879741)
       (= D 0)
       (>= (tx.origin L) 0)
       (>= (tx.gasprice L) 0)
       (>= (msg.value L) 0)
       (>= (msg.sender L) 0)
       (>= (block.timestamp L) 0)
       (>= (block.number L) 0)
       (>= (block.gaslimit L) 0)
       (>= (block.difficulty L) 0)
       (>= (block.coinbase L) 0)
       (>= (block.chainid L) 0)
       (>= (block.basefee L) 0)
       (>= (bytes_tuple_accessor_length (msg.data L)) 4)
       a!6
       (>= F (msg.value L))
       (<= (tx.origin L) 1461501637330902918203684832716283019655932542975)
       (<= (tx.gasprice L)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (msg.value L)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (msg.sender L) 1461501637330902918203684832716283019655932542975)
       (<= (block.timestamp L)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.number L)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.gaslimit L)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.difficulty L)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.coinbase L) 1461501637330902918203684832716283019655932542975)
       (<= (block.chainid L)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.basefee L)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       a!7
       (= H G)))
      )
      (summary_4_function_f3__40_41_0 E K B C L G J A)
    )
  )
)
(assert
  (forall ( (A Int) (B abi_type) (C crypto_type) (D Int) (E state_type) (F state_type) (G Int) (H tx_type) ) 
    (=>
      (and
        (summary_4_function_f3__40_41_0 D G B C H E F A)
        (interface_0_Simp_41_0 G B C E)
        (= D 0)
      )
      (interface_0_Simp_41_0 G B C F)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D state_type) (E state_type) (F Int) (G tx_type) ) 
    (=>
      (and
        (summary_constructor_2_Simp_41_0 C F A B G D E)
        (and (= C 0)
     (>= (tx.origin G) 0)
     (>= (tx.gasprice G) 0)
     (>= (msg.value G) 0)
     (>= (msg.sender G) 0)
     (>= (block.timestamp G) 0)
     (>= (block.number G) 0)
     (>= (block.gaslimit G) 0)
     (>= (block.difficulty G) 0)
     (>= (block.coinbase G) 0)
     (>= (block.chainid G) 0)
     (>= (block.basefee G) 0)
     (<= (tx.origin G) 1461501637330902918203684832716283019655932542975)
     (<= (tx.gasprice G)
         115792089237316195423570985008687907853269984665640564039457584007913129639935)
     (<= (msg.value G)
         115792089237316195423570985008687907853269984665640564039457584007913129639935)
     (<= (msg.sender G) 1461501637330902918203684832716283019655932542975)
     (<= (block.timestamp G)
         115792089237316195423570985008687907853269984665640564039457584007913129639935)
     (<= (block.number G)
         115792089237316195423570985008687907853269984665640564039457584007913129639935)
     (<= (block.gaslimit G)
         115792089237316195423570985008687907853269984665640564039457584007913129639935)
     (<= (block.difficulty G)
         115792089237316195423570985008687907853269984665640564039457584007913129639935)
     (<= (block.coinbase G) 1461501637330902918203684832716283019655932542975)
     (<= (block.chainid G)
         115792089237316195423570985008687907853269984665640564039457584007913129639935)
     (<= (block.basefee G)
         115792089237316195423570985008687907853269984665640564039457584007913129639935)
     (= (msg.value G) 0))
      )
      (interface_0_Simp_41_0 F A B E)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D state_type) (E state_type) (F Int) (G tx_type) ) 
    (=>
      (and
        (and (= C 0) (= E D))
      )
      (contract_initializer_entry_16_Simp_41_0 C F A B G D E)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D state_type) (E state_type) (F Int) (G tx_type) ) 
    (=>
      (and
        (contract_initializer_entry_16_Simp_41_0 C F A B G D E)
        true
      )
      (contract_initializer_after_init_17_Simp_41_0 C F A B G D E)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D state_type) (E state_type) (F Int) (G tx_type) ) 
    (=>
      (and
        (contract_initializer_after_init_17_Simp_41_0 C F A B G D E)
        true
      )
      (contract_initializer_15_Simp_41_0 C F A B G D E)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D state_type) (E state_type) (F Int) (G tx_type) ) 
    (=>
      (and
        (and (= C 0) (>= (select (balances E) F) (msg.value G)) (= E D))
      )
      (implicit_constructor_entry_18_Simp_41_0 C F A B G D E)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D Int) (E state_type) (F state_type) (G state_type) (H Int) (I tx_type) ) 
    (=>
      (and
        (implicit_constructor_entry_18_Simp_41_0 C H A B I E F)
        (contract_initializer_15_Simp_41_0 D H A B I F G)
        (not (<= D 0))
      )
      (summary_constructor_2_Simp_41_0 D H A B I E G)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D Int) (E state_type) (F state_type) (G state_type) (H Int) (I tx_type) ) 
    (=>
      (and
        (contract_initializer_15_Simp_41_0 D H A B I F G)
        (implicit_constructor_entry_18_Simp_41_0 C H A B I E F)
        (= D 0)
      )
      (summary_constructor_2_Simp_41_0 D H A B I E G)
    )
  )
)
(assert
  (forall ( (A Int) (B abi_type) (C crypto_type) (D Int) (E state_type) (F state_type) (G Int) (H tx_type) ) 
    (=>
      (and
        (summary_4_function_f3__40_41_0 D G B C H E F A)
        (interface_0_Simp_41_0 G B C E)
        (= D 1)
      )
      error_target_7_0
    )
  )
)
(assert
  (forall ( (CHC_COMP_UNUSED Bool) ) 
    (=>
      (and
        error_target_7_0
        true
      )
      false
    )
  )
)

(check-sat)
(exit)
