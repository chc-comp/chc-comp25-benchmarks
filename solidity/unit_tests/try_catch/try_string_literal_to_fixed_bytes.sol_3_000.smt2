(set-logic HORN)

(declare-datatypes ((state_type 0)) (((state_type  (balances (Array Int Int))))))
(declare-datatypes ((abi_type 0)) (((abi_type ))))
(declare-datatypes ((bytes_tuple 0)) (((bytes_tuple  (bytes_tuple_accessor_array (Array Int Int)) (bytes_tuple_accessor_length Int)))))
(declare-datatypes ((ecrecover_input_type 0)) (((ecrecover_input_type  (hash Int) (v Int) (r Int) (s Int)))))
(declare-datatypes ((crypto_type 0)) (((crypto_type  (ecrecover (Array ecrecover_input_type Int)) (keccak256 (Array bytes_tuple Int)) (ripemd160 (Array bytes_tuple Int)) (sha256 (Array bytes_tuple Int))))))
(declare-datatypes ((tx_type 0)) (((tx_type  (block.basefee Int) (block.chainid Int) (block.coinbase Int) (block.difficulty Int) (block.gaslimit Int) (block.number Int) (block.timestamp Int) (blockhash (Array Int Int)) (msg.data bytes_tuple) (msg.sender Int) (msg.sig Int) (msg.value Int) (tx.gasprice Int) (tx.origin Int)))))

(declare-fun |contract_initializer_after_init_29_C_64_0| ( Int Int abi_type crypto_type tx_type state_type state_type ) Bool)
(declare-fun |block_9_return_function_g__8_64_0| ( Int Int abi_type crypto_type tx_type state_type state_type Int ) Bool)
(declare-fun |block_20_function_f__63_64_0| ( Int Int abi_type crypto_type tx_type state_type state_type Int ) Bool)
(declare-fun |block_16_f_62_64_0| ( Int Int abi_type crypto_type tx_type state_type state_type Int ) Bool)
(declare-fun |block_15_try_header_f_61_64_0| ( Int Int abi_type crypto_type tx_type state_type state_type Int ) Bool)
(declare-fun |block_23_function_f__63_64_0| ( Int Int abi_type crypto_type tx_type state_type state_type Int ) Bool)
(declare-fun |block_13_f_62_64_0| ( Int Int abi_type crypto_type tx_type state_type state_type Int ) Bool)
(declare-fun |interface_0_C_64_0| ( Int abi_type crypto_type state_type ) Bool)
(declare-fun |block_25_function_f__63_64_0| ( Int Int abi_type crypto_type tx_type state_type state_type Int ) Bool)
(declare-fun |block_11_function_g__8_64_0| ( Int Int abi_type crypto_type tx_type state_type state_type Int ) Bool)
(declare-fun |block_17_try_clause_58f_58_64_0| ( Int Int abi_type crypto_type tx_type state_type state_type Int ) Bool)
(declare-fun |summary_6_function_f__63_64_0| ( Int Int abi_type crypto_type tx_type state_type state_type ) Bool)
(declare-fun |block_8_g_7_64_0| ( Int Int abi_type crypto_type tx_type state_type state_type Int ) Bool)
(declare-fun |summary_constructor_2_C_64_0| ( Int Int abi_type crypto_type tx_type state_type state_type ) Bool)
(declare-fun |block_22_function_f__63_64_0| ( Int Int abi_type crypto_type tx_type state_type state_type Int ) Bool)
(declare-fun |block_18_try_clause_60f_60_64_0| ( Int Int abi_type crypto_type tx_type state_type state_type Int ) Bool)
(declare-fun |error_target_8_0| ( ) Bool)
(declare-fun |summary_3_function_g__8_64_0| ( Int Int abi_type crypto_type tx_type state_type state_type Int ) Bool)
(declare-fun |block_14_return_function_f__63_64_0| ( Int Int abi_type crypto_type tx_type state_type state_type Int ) Bool)
(declare-fun |block_26_function_f__63_64_0| ( Int Int abi_type crypto_type tx_type state_type state_type Int ) Bool)
(declare-fun |block_24_function_f__63_64_0| ( Int Int abi_type crypto_type tx_type state_type state_type Int ) Bool)
(declare-fun |contract_initializer_entry_28_C_64_0| ( Int Int abi_type crypto_type tx_type state_type state_type ) Bool)
(declare-fun |summary_5_function_f__63_64_0| ( Int Int abi_type crypto_type tx_type state_type state_type ) Bool)
(declare-fun |block_7_function_g__8_64_0| ( Int Int abi_type crypto_type tx_type state_type state_type Int ) Bool)
(declare-fun |block_21_function_f__63_64_0| ( Int Int abi_type crypto_type tx_type state_type state_type Int ) Bool)
(declare-fun |implicit_constructor_entry_30_C_64_0| ( Int Int abi_type crypto_type tx_type state_type state_type ) Bool)
(declare-fun |contract_initializer_27_C_64_0| ( Int Int abi_type crypto_type tx_type state_type state_type ) Bool)
(declare-fun |summary_4_function_g__8_64_0| ( Int Int abi_type crypto_type tx_type state_type state_type Int ) Bool)
(declare-fun |block_12_function_f__63_64_0| ( Int Int abi_type crypto_type tx_type state_type state_type Int ) Bool)
(declare-fun |summary_19_function_g__8_64_0| ( Int Int abi_type crypto_type tx_type state_type state_type Int ) Bool)

(assert
  (forall ( (A Int) (B abi_type) (C crypto_type) (D Int) (E state_type) (F state_type) (G Int) (H tx_type) ) 
    (=>
      (and
        true
      )
      (block_7_function_g__8_64_0 D G B C H E F A)
    )
  )
)
(assert
  (forall ( (A Int) (B abi_type) (C crypto_type) (D Int) (E state_type) (F state_type) (G Int) (H tx_type) ) 
    (=>
      (and
        (block_7_function_g__8_64_0 D G B C H E F A)
        (and (= D 0) (= F E))
      )
      (block_8_g_7_64_0 D G B C H E F A)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C abi_type) (D crypto_type) (E Int) (F bytes_tuple) (G state_type) (H state_type) (I Int) (J tx_type) ) 
    (=>
      (and
        (block_8_g_7_64_0 E I C D J G H A)
        (and (= (select (bytes_tuple_accessor_array F) 0) 255)
     (= (bytes_tuple_accessor_length F) 2)
     (= B 65535)
     (= A 0)
     (= (select (bytes_tuple_accessor_array F) 1) 255))
      )
      (block_9_return_function_g__8_64_0 E I C D J G H B)
    )
  )
)
(assert
  (forall ( (A Int) (B abi_type) (C crypto_type) (D Int) (E state_type) (F state_type) (G Int) (H tx_type) ) 
    (=>
      (and
        (block_9_return_function_g__8_64_0 D G B C H E F A)
        true
      )
      (summary_3_function_g__8_64_0 D G B C H E F A)
    )
  )
)
(assert
  (forall ( (A Int) (B abi_type) (C crypto_type) (D Int) (E state_type) (F state_type) (G Int) (H tx_type) ) 
    (=>
      (and
        true
      )
      (block_11_function_g__8_64_0 D G B C H E F A)
    )
  )
)
(assert
  (forall ( (A Int) (B abi_type) (C crypto_type) (D Int) (E Int) (F Int) (G state_type) (H state_type) (I state_type) (J state_type) (K Int) (L tx_type) ) 
    (=>
      (and
        (block_11_function_g__8_64_0 D K B C L G H A)
        (summary_3_function_g__8_64_0 E K B C L I J A)
        (let ((a!1 (= (select (bytes_tuple_accessor_array (msg.data L)) 3) 142))
      (a!2 (= (select (bytes_tuple_accessor_array (msg.data L)) 2) 155))
      (a!3 (= (select (bytes_tuple_accessor_array (msg.data L)) 1) 23))
      (a!4 (= (select (bytes_tuple_accessor_array (msg.data L)) 0) 226))
      (a!5 (>= (+ (select (balances H) K) F) 0))
      (a!6 (<= (+ (select (balances H) K) F)
               115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (a!7 (store (balances H) K (+ (select (balances H) K) F))))
  (and (= H G)
       a!1
       a!2
       a!3
       a!4
       (= (msg.value L) 0)
       (= (msg.sig L) 3793197966)
       (= D 0)
       (>= (tx.origin L) 0)
       (>= (tx.gasprice L) 0)
       (>= (msg.value L) 0)
       (>= (msg.sender L) 0)
       (>= (block.timestamp L) 0)
       (>= (block.number L) 0)
       (>= (block.gaslimit L) 0)
       (>= (block.difficulty L) 0)
       (>= (block.coinbase L) 0)
       (>= (block.chainid L) 0)
       (>= (block.basefee L) 0)
       (>= (bytes_tuple_accessor_length (msg.data L)) 4)
       a!5
       (>= F (msg.value L))
       (<= (tx.origin L) 1461501637330902918203684832716283019655932542975)
       (<= (tx.gasprice L)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (msg.value L)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (msg.sender L) 1461501637330902918203684832716283019655932542975)
       (<= (block.timestamp L)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.number L)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.gaslimit L)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.difficulty L)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.coinbase L) 1461501637330902918203684832716283019655932542975)
       (<= (block.chainid L)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.basefee L)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       a!6
       (= I (state_type a!7))))
      )
      (summary_4_function_g__8_64_0 E K B C L G J A)
    )
  )
)
(assert
  (forall ( (A Int) (B abi_type) (C crypto_type) (D Int) (E state_type) (F state_type) (G Int) (H tx_type) ) 
    (=>
      (and
        (summary_4_function_g__8_64_0 D G B C H E F A)
        (interface_0_C_64_0 G B C E)
        (= D 0)
      )
      (interface_0_C_64_0 G B C F)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D state_type) (E state_type) (F Int) (G tx_type) ) 
    (=>
      (and
        (summary_6_function_f__63_64_0 C F A B G D E)
        (interface_0_C_64_0 F A B D)
        (= C 0)
      )
      (interface_0_C_64_0 F A B E)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D state_type) (E state_type) (F Int) (G tx_type) ) 
    (=>
      (and
        (summary_constructor_2_C_64_0 C F A B G D E)
        (and (= C 0)
     (>= (tx.origin G) 0)
     (>= (tx.gasprice G) 0)
     (>= (msg.value G) 0)
     (>= (msg.sender G) 0)
     (>= (block.timestamp G) 0)
     (>= (block.number G) 0)
     (>= (block.gaslimit G) 0)
     (>= (block.difficulty G) 0)
     (>= (block.coinbase G) 0)
     (>= (block.chainid G) 0)
     (>= (block.basefee G) 0)
     (<= (tx.origin G) 1461501637330902918203684832716283019655932542975)
     (<= (tx.gasprice G)
         115792089237316195423570985008687907853269984665640564039457584007913129639935)
     (<= (msg.value G)
         115792089237316195423570985008687907853269984665640564039457584007913129639935)
     (<= (msg.sender G) 1461501637330902918203684832716283019655932542975)
     (<= (block.timestamp G)
         115792089237316195423570985008687907853269984665640564039457584007913129639935)
     (<= (block.number G)
         115792089237316195423570985008687907853269984665640564039457584007913129639935)
     (<= (block.gaslimit G)
         115792089237316195423570985008687907853269984665640564039457584007913129639935)
     (<= (block.difficulty G)
         115792089237316195423570985008687907853269984665640564039457584007913129639935)
     (<= (block.coinbase G) 1461501637330902918203684832716283019655932542975)
     (<= (block.chainid G)
         115792089237316195423570985008687907853269984665640564039457584007913129639935)
     (<= (block.basefee G)
         115792089237316195423570985008687907853269984665640564039457584007913129639935)
     (= (msg.value G) 0))
      )
      (interface_0_C_64_0 F A B E)
    )
  )
)
(assert
  (forall ( (A abi_type) (B Int) (C crypto_type) (D Int) (E state_type) (F state_type) (G Int) (H tx_type) ) 
    (=>
      (and
        true
      )
      (block_12_function_f__63_64_0 D G A C H E F B)
    )
  )
)
(assert
  (forall ( (A abi_type) (B Int) (C crypto_type) (D Int) (E state_type) (F state_type) (G Int) (H tx_type) ) 
    (=>
      (and
        (block_12_function_f__63_64_0 D G A C H E F B)
        (and (= D 0) (= F E))
      )
      (block_13_f_62_64_0 D G A C H E F B)
    )
  )
)
(assert
  (forall ( (A abi_type) (B Int) (C crypto_type) (D Int) (E state_type) (F state_type) (G Int) (H tx_type) ) 
    (=>
      (and
        (block_13_f_62_64_0 D G A C H E F B)
        (= B 0)
      )
      (block_15_try_header_f_61_64_0 D G A C H E F B)
    )
  )
)
(assert
  (forall ( (A abi_type) (B Int) (C crypto_type) (D Int) (E Int) (F state_type) (G state_type) (H Int) (I tx_type) ) 
    (=>
      (and
        (block_15_try_header_f_61_64_0 D H A C I F G B)
        (= E H)
      )
      (block_18_try_clause_60f_60_64_0 D H A C I F G B)
    )
  )
)
(assert
  (forall ( (A Int) (B abi_type) (C crypto_type) (D Int) (E state_type) (F state_type) (G Int) (H tx_type) ) 
    (=>
      (and
        (summary_3_function_g__8_64_0 D G B C H E F A)
        true
      )
      (summary_19_function_g__8_64_0 D G B C H E F A)
    )
  )
)
(assert
  (forall ( (A Int) (B abi_type) (C Int) (D crypto_type) (E Int) (F Int) (G Int) (H state_type) (I state_type) (J Int) (K tx_type) (L tx_type) (M tx_type) (v_13 state_type) ) 
    (=>
      (and
        (block_15_try_header_f_61_64_0 E J B D K H I C)
        (summary_19_function_g__8_64_0 F G B D L I v_13 A)
        (let ((a!1 (= (select (bytes_tuple_accessor_array (msg.data L)) 3) 142))
      (a!2 (= (select (bytes_tuple_accessor_array (msg.data L)) 2) 155))
      (a!3 (= (select (bytes_tuple_accessor_array (msg.data L)) 1) 23))
      (a!4 (= (select (bytes_tuple_accessor_array (msg.data L)) 0) 226)))
  (and (= v_13 I)
       a!1
       a!2
       a!3
       a!4
       (= (tx.origin L) (tx.origin K))
       (= (msg.value L) 0)
       (= (msg.sig L) 3793197966)
       (= (msg.sender L) J)
       (= G J)
       (>= (tx.origin L) 0)
       (>= (tx.gasprice L) 0)
       (>= (msg.value L) 0)
       (>= (msg.sender L) 0)
       (>= (block.timestamp L) 0)
       (>= (block.number L) 0)
       (>= (block.gaslimit L) 0)
       (>= (block.difficulty L) 0)
       (>= (block.coinbase L) 0)
       (>= (block.chainid L) 0)
       (>= (block.basefee L) 0)
       (>= (bytes_tuple_accessor_length (msg.data L)) 4)
       (<= (tx.origin L) 1461501637330902918203684832716283019655932542975)
       (<= (tx.gasprice L)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (msg.value L)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (msg.sender L) 1461501637330902918203684832716283019655932542975)
       (<= (block.timestamp L)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.number L)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.gaslimit L)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.difficulty L)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.coinbase L) 1461501637330902918203684832716283019655932542975)
       (<= (block.chainid L)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.basefee L)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (not (<= F 0))
       (= K M)))
      )
      (summary_5_function_f__63_64_0 F J B D K H I)
    )
  )
)
(assert
  (forall ( (A abi_type) (B Int) (C crypto_type) (D Int) (E state_type) (F state_type) (G Int) (H tx_type) ) 
    (=>
      (and
        (block_20_function_f__63_64_0 D G A C H E F B)
        true
      )
      (summary_5_function_f__63_64_0 D G A C H E F)
    )
  )
)
(assert
  (forall ( (A abi_type) (B Int) (C crypto_type) (D Int) (E state_type) (F state_type) (G Int) (H tx_type) ) 
    (=>
      (and
        (block_21_function_f__63_64_0 D G A C H E F B)
        true
      )
      (summary_5_function_f__63_64_0 D G A C H E F)
    )
  )
)
(assert
  (forall ( (A abi_type) (B Int) (C crypto_type) (D Int) (E state_type) (F state_type) (G Int) (H tx_type) ) 
    (=>
      (and
        (block_22_function_f__63_64_0 D G A C H E F B)
        true
      )
      (summary_5_function_f__63_64_0 D G A C H E F)
    )
  )
)
(assert
  (forall ( (A abi_type) (B Int) (C crypto_type) (D Int) (E state_type) (F state_type) (G Int) (H tx_type) ) 
    (=>
      (and
        (block_23_function_f__63_64_0 D G A C H E F B)
        true
      )
      (summary_5_function_f__63_64_0 D G A C H E F)
    )
  )
)
(assert
  (forall ( (A abi_type) (B Int) (C crypto_type) (D Int) (E state_type) (F state_type) (G Int) (H tx_type) ) 
    (=>
      (and
        (block_24_function_f__63_64_0 D G A C H E F B)
        true
      )
      (summary_5_function_f__63_64_0 D G A C H E F)
    )
  )
)
(assert
  (forall ( (A abi_type) (B Int) (C crypto_type) (D Int) (E state_type) (F state_type) (G Int) (H tx_type) ) 
    (=>
      (and
        (block_25_function_f__63_64_0 D G A C H E F B)
        true
      )
      (summary_5_function_f__63_64_0 D G A C H E F)
    )
  )
)
(assert
  (forall ( (A abi_type) (B Int) (C crypto_type) (D Int) (E state_type) (F state_type) (G Int) (H tx_type) ) 
    (=>
      (and
        (block_14_return_function_f__63_64_0 D G A C H E F B)
        true
      )
      (summary_5_function_f__63_64_0 D G A C H E F)
    )
  )
)
(assert
  (forall ( (A Int) (B abi_type) (C Int) (D Int) (E crypto_type) (F Int) (G Int) (H Int) (I Int) (J state_type) (K state_type) (L Int) (M tx_type) (N tx_type) (O tx_type) (v_15 state_type) ) 
    (=>
      (and
        (block_15_try_header_f_61_64_0 F L B E M J K C)
        (summary_19_function_g__8_64_0 G H B E N K v_15 A)
        (let ((a!1 (= (select (bytes_tuple_accessor_array (msg.data N)) 3) 142))
      (a!2 (= (select (bytes_tuple_accessor_array (msg.data N)) 2) 155))
      (a!3 (= (select (bytes_tuple_accessor_array (msg.data N)) 1) 23))
      (a!4 (= (select (bytes_tuple_accessor_array (msg.data N)) 0) 226)))
  (and (= v_15 K)
       a!1
       a!2
       a!3
       a!4
       (= (tx.origin N) (tx.origin M))
       (= (msg.value N) 0)
       (= (msg.sig N) 3793197966)
       (= (msg.sender N) L)
       (= G 0)
       (= H L)
       (= D I)
       (= I A)
       (>= (tx.origin N) 0)
       (>= (tx.gasprice N) 0)
       (>= (msg.value N) 0)
       (>= (msg.sender N) 0)
       (>= (block.timestamp N) 0)
       (>= (block.number N) 0)
       (>= (block.gaslimit N) 0)
       (>= (block.difficulty N) 0)
       (>= (block.coinbase N) 0)
       (>= (block.chainid N) 0)
       (>= (block.basefee N) 0)
       (>= (bytes_tuple_accessor_length (msg.data N)) 4)
       (>= I 0)
       (<= (tx.origin N) 1461501637330902918203684832716283019655932542975)
       (<= (tx.gasprice N)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (msg.value N)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (msg.sender N) 1461501637330902918203684832716283019655932542975)
       (<= (block.timestamp N)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.number N)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.gaslimit N)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.difficulty N)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.coinbase N) 1461501637330902918203684832716283019655932542975)
       (<= (block.chainid N)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.basefee N)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= I 65535)
       (= M O)))
      )
      (block_17_try_clause_58f_58_64_0 G L B E M J K D)
    )
  )
)
(assert
  (forall ( (A abi_type) (B Int) (C crypto_type) (D Int) (E Int) (F Int) (G Int) (H state_type) (I state_type) (J Int) (K tx_type) ) 
    (=>
      (and
        (block_17_try_clause_58f_58_64_0 D J A C K H I B)
        (and (= F B) (= E 1) (>= F 0) (<= F 65535) (or (not (<= 0 G)) (>= G 2)) (= G 0))
      )
      (block_20_function_f__63_64_0 E J A C K H I B)
    )
  )
)
(assert
  (forall ( (A abi_type) (B Int) (C crypto_type) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Bool) (N Int) (O Int) (P state_type) (Q state_type) (R Int) (S tx_type) ) 
    (=>
      (and
        (block_17_try_clause_58f_58_64_0 D R A C S P Q B)
        (let ((a!1 (ite (>= G 0)
                ((_ int_to_bv 16) G)
                (bvmul #xffff ((_ int_to_bv 16) (* (- 1) G)))))
      (a!2 (ite (>= H 0)
                ((_ int_to_bv 16) (* 8 H))
                (bvmul #xffff ((_ int_to_bv 16) (* (- 8) H))))))
(let ((a!3 (+ (* 256 (ubv_to_int #x00))
              (ubv_to_int ((_ extract 15 8) (bvshl a!1 a!2))))))
  (and (= O 1)
       (= E D)
       (= K J)
       (= G B)
       (= F 2)
       (= L 255)
       (= H 0)
       (= N B)
       (= J (ite (<= 2 H) I a!3))
       (>= K 0)
       (>= G 0)
       (>= J 0)
       (<= K 255)
       (<= G 65535)
       (<= J 255)
       (or (not (<= 0 O)) (>= O 2))
       (or (not M) (and (<= N 65535) (>= N 0)))
       (= M (= K L)))))
      )
      (block_21_function_f__63_64_0 F R A C S P Q B)
    )
  )
)
(assert
  (forall ( (A abi_type) (B Int) (C crypto_type) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Bool) (O Int) (P Int) (Q Int) (R Int) (S Int) (T Int) (U Bool) (V Bool) (W state_type) (X state_type) (Y Int) (Z tx_type) ) 
    (=>
      (and
        (block_17_try_clause_58f_58_64_0 D Y A C Z W X B)
        (let ((a!1 (ite (>= O 0)
                ((_ int_to_bv 16) O)
                (bvmul #xffff ((_ int_to_bv 16) (* (- 1) O)))))
      (a!2 (ite (>= P 0)
                ((_ int_to_bv 16) (* 8 P))
                (bvmul #xffff ((_ int_to_bv 16) (* (- 8) P)))))
      (a!4 (ite (>= H 0)
                ((_ int_to_bv 16) H)
                (bvmul #xffff ((_ int_to_bv 16) (* (- 1) H)))))
      (a!5 (ite (>= I 0)
                ((_ int_to_bv 16) (* 8 I))
                (bvmul #xffff ((_ int_to_bv 16) (* (- 8) I))))))
(let ((a!3 (+ (* 256 (ubv_to_int #x00))
              (ubv_to_int ((_ extract 15 8) (bvshl a!1 a!2)))))
      (a!6 (+ (* 256 (ubv_to_int #x00))
              (ubv_to_int ((_ extract 15 8) (bvshl a!4 a!5))))))
  (and (= V (and N U))
       (= N (= L M))
       (= E D)
       (= G 3)
       (= L K)
       (= H B)
       (= F E)
       (= P 1)
       (= R (ite (<= 2 P) Q a!3))
       (= K (ite (<= 2 I) J a!6))
       (= M 255)
       (= S R)
       (= I 0)
       (= O B)
       (= T 255)
       (>= L 0)
       (>= H 0)
       (>= K 0)
       (<= L 255)
       (<= H 65535)
       (<= K 255)
       (or (not N) (and (<= R 255) (>= R 0)))
       (or (not N) (and (<= S 255) (>= S 0)))
       (or (not N) (and (<= O 65535) (>= O 0)))
       (not V)
       (= U (= S T)))))
      )
      (block_22_function_f__63_64_0 G Y A C Z W X B)
    )
  )
)
(assert
  (forall ( (A abi_type) (B Int) (C crypto_type) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Int) (O Bool) (P Int) (Q Int) (R Int) (S Int) (T Int) (U Int) (V Bool) (W Bool) (X Int) (Y Int) (Z state_type) (A1 state_type) (B1 Int) (C1 tx_type) ) 
    (=>
      (and
        (block_17_try_clause_58f_58_64_0 D B1 A C C1 Z A1 B)
        (let ((a!1 (ite (>= P 0)
                ((_ int_to_bv 16) P)
                (bvmul #xffff ((_ int_to_bv 16) (* (- 1) P)))))
      (a!2 (ite (>= Q 0)
                ((_ int_to_bv 16) (* 8 Q))
                (bvmul #xffff ((_ int_to_bv 16) (* (- 8) Q)))))
      (a!4 (ite (>= I 0)
                ((_ int_to_bv 16) I)
                (bvmul #xffff ((_ int_to_bv 16) (* (- 1) I)))))
      (a!5 (ite (>= J 0)
                ((_ int_to_bv 16) (* 8 J))
                (bvmul #xffff ((_ int_to_bv 16) (* (- 8) J))))))
(let ((a!3 (+ (* 256 (ubv_to_int #x00))
              (ubv_to_int ((_ extract 15 8) (bvshl a!1 a!2)))))
      (a!6 (+ (* 256 (ubv_to_int #x00))
              (ubv_to_int ((_ extract 15 8) (bvshl a!4 a!5))))))
  (and (= V (= T U))
       (= W (and V O))
       (= Y 0)
       (= H 4)
       (= G F)
       (= F E)
       (= E D)
       (= J 0)
       (= M L)
       (= I B)
       (= S (ite (<= 2 Q) R a!3))
       (= U 255)
       (= N 255)
       (= Q 1)
       (= P B)
       (= L (ite (<= 2 J) K a!6))
       (= X B)
       (= T S)
       (>= M 0)
       (>= I 0)
       (>= L 0)
       (>= X 0)
       (<= M 255)
       (<= I 65535)
       (<= L 255)
       (<= X 65535)
       (or (not (<= 0 Y)) (>= Y 2))
       (or (not O) (and (<= S 255) (>= S 0)))
       (or (not O) (and (<= P 65535) (>= P 0)))
       (or (not O) (and (<= T 255) (>= T 0)))
       (= O (= M N)))))
      )
      (block_23_function_f__63_64_0 H B1 A C C1 Z A1 B)
    )
  )
)
(assert
  (forall ( (A abi_type) (B Int) (C crypto_type) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Int) (O Int) (P Bool) (Q Int) (R Int) (S Int) (T Int) (U Int) (V Int) (W Bool) (X Bool) (Y Int) (Z Int) (A1 Int) (B1 Int) (C1 Int) (D1 Int) (E1 Bool) (F1 Int) (G1 Int) (H1 state_type) (I1 state_type) (J1 Int) (K1 tx_type) ) 
    (=>
      (and
        (block_17_try_clause_58f_58_64_0 D J1 A C K1 H1 I1 B)
        (let ((a!1 (ite (>= J 0)
                ((_ int_to_bv 16) J)
                (bvmul #xffff ((_ int_to_bv 16) (* (- 1) J)))))
      (a!2 (ite (>= K 0)
                ((_ int_to_bv 16) (* 8 K))
                (bvmul #xffff ((_ int_to_bv 16) (* (- 8) K)))))
      (a!4 (ite (>= Q 0)
                ((_ int_to_bv 16) Q)
                (bvmul #xffff ((_ int_to_bv 16) (* (- 1) Q)))))
      (a!5 (ite (>= R 0)
                ((_ int_to_bv 16) (* 8 R))
                (bvmul #xffff ((_ int_to_bv 16) (* (- 8) R)))))
      (a!7 (ite (>= Y 0)
                ((_ int_to_bv 16) Y)
                (bvmul #xffff ((_ int_to_bv 16) (* (- 1) Y)))))
      (a!8 (ite (>= Z 0)
                ((_ int_to_bv 16) (* 8 Z))
                (bvmul #xffff ((_ int_to_bv 16) (* (- 8) Z))))))
(let ((a!3 (+ (* 256 (ubv_to_int #x00))
              (ubv_to_int ((_ extract 15 8) (bvshl a!1 a!2)))))
      (a!6 (+ (* 256 (ubv_to_int #x00))
              (ubv_to_int ((_ extract 15 8) (bvshl a!4 a!5)))))
      (a!9 (+ (* 256 (ubv_to_int #x00))
              (ubv_to_int ((_ extract 15 8) (bvshl a!7 a!8))))))
  (and (= E1 (= C1 D1))
       (= X (and P W))
       (= P (= N O))
       (= G1 1)
       (= I 5)
       (= K 0)
       (= H G)
       (= G F)
       (= F E)
       (= E D)
       (= O 255)
       (= N M)
       (= M (ite (<= 2 K) L a!3))
       (= J B)
       (= R 1)
       (= U T)
       (= Q B)
       (= C1 B1)
       (= V 255)
       (= Y B)
       (= D1 0)
       (= T (ite (<= 2 R) S a!6))
       (= Z 0)
       (= F1 B)
       (= B1 (ite (<= 2 Z) A1 a!9))
       (>= N 0)
       (>= M 0)
       (>= J 0)
       (>= C1 0)
       (>= Y 0)
       (>= B1 0)
       (<= N 255)
       (<= M 255)
       (<= J 65535)
       (<= C1 255)
       (<= Y 65535)
       (<= B1 255)
       (or (not (<= 0 G1)) (>= G1 2))
       (or E1 (and (<= F1 65535) (>= F1 0)))
       (or (not P) (and (<= U 255) (>= U 0)))
       (or (not P) (and (<= Q 65535) (>= Q 0)))
       (or (not P) (and (<= T 255) (>= T 0)))
       (= W (= U V)))))
      )
      (block_24_function_f__63_64_0 I J1 A C K1 H1 I1 B)
    )
  )
)
(assert
  (forall ( (A abi_type) (B Int) (C crypto_type) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Int) (O Int) (P Int) (Q Bool) (R Int) (S Int) (T Int) (U Int) (V Int) (W Int) (X Bool) (Y Bool) (Z Int) (A1 Int) (B1 Int) (C1 Int) (D1 Int) (E1 Int) (F1 Bool) (G1 Int) (H1 Int) (I1 Int) (J1 Int) (K1 Int) (L1 Int) (M1 Bool) (N1 Bool) (O1 state_type) (P1 state_type) (Q1 Int) (R1 tx_type) ) 
    (=>
      (and
        (block_17_try_clause_58f_58_64_0 D Q1 A C R1 O1 P1 B)
        (let ((a!1 (ite (>= K 0)
                ((_ int_to_bv 16) K)
                (bvmul #xffff ((_ int_to_bv 16) (* (- 1) K)))))
      (a!2 (ite (>= L 0)
                ((_ int_to_bv 16) (* 8 L))
                (bvmul #xffff ((_ int_to_bv 16) (* (- 8) L)))))
      (a!4 (ite (>= R 0)
                ((_ int_to_bv 16) R)
                (bvmul #xffff ((_ int_to_bv 16) (* (- 1) R)))))
      (a!5 (ite (>= S 0)
                ((_ int_to_bv 16) (* 8 S))
                (bvmul #xffff ((_ int_to_bv 16) (* (- 8) S)))))
      (a!7 (ite (>= G1 0)
                ((_ int_to_bv 16) G1)
                (bvmul #xffff ((_ int_to_bv 16) (* (- 1) G1)))))
      (a!8 (ite (>= H1 0)
                ((_ int_to_bv 16) (* 8 H1))
                (bvmul #xffff ((_ int_to_bv 16) (* (- 8) H1)))))
      (a!10 (ite (>= Z 0)
                 ((_ int_to_bv 16) Z)
                 (bvmul #xffff ((_ int_to_bv 16) (* (- 1) Z)))))
      (a!11 (ite (>= A1 0)
                 ((_ int_to_bv 16) (* 8 A1))
                 (bvmul #xffff ((_ int_to_bv 16) (* (- 8) A1))))))
(let ((a!3 (+ (* 256 (ubv_to_int #x00))
              (ubv_to_int ((_ extract 15 8) (bvshl a!1 a!2)))))
      (a!6 (+ (* 256 (ubv_to_int #x00))
              (ubv_to_int ((_ extract 15 8) (bvshl a!4 a!5)))))
      (a!9 (+ (* 256 (ubv_to_int #x00))
              (ubv_to_int ((_ extract 15 8) (bvshl a!7 a!8)))))
      (a!12 (+ (* 256 (ubv_to_int #x00))
               (ubv_to_int ((_ extract 15 8) (bvshl a!10 a!11))))))
  (and (= N1 (or F1 M1))
       (= Q (= O P))
       (= X (= V W))
       (= Y (and X Q))
       (= F1 (= D1 E1))
       (= G F)
       (= H G)
       (= E D)
       (= P 255)
       (= K B)
       (= J 6)
       (= W 255)
       (= S 1)
       (= R B)
       (= F E)
       (= O N)
       (= N (ite (<= 2 L) M a!3))
       (= L 0)
       (= I H)
       (= V U)
       (= U (ite (<= 2 S) T a!6))
       (= D1 C1)
       (= Z B)
       (= H1 1)
       (= J1 (ite (<= 2 H1) I1 a!9))
       (= C1 (ite (<= 2 A1) B1 a!12))
       (= E1 0)
       (= K1 J1)
       (= A1 0)
       (= G1 B)
       (= L1 0)
       (>= K 0)
       (>= O 0)
       (>= N 0)
       (>= D1 0)
       (>= Z 0)
       (>= C1 0)
       (<= K 65535)
       (<= O 255)
       (<= N 255)
       (<= D1 255)
       (<= Z 65535)
       (<= C1 255)
       (or (not Q) (and (<= R 65535) (>= R 0)))
       (or (not Q) (and (<= V 255) (>= V 0)))
       (or (not Q) (and (<= U 255) (>= U 0)))
       (or F1 (and (<= J1 255) (>= J1 0)))
       (or F1 (and (<= K1 255) (>= K1 0)))
       (or F1 (and (<= G1 65535) (>= G1 0)))
       (not N1)
       (= M1 (= K1 L1)))))
      )
      (block_25_function_f__63_64_0 J Q1 A C R1 O1 P1 B)
    )
  )
)
(assert
  (forall ( (A abi_type) (B Int) (C crypto_type) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Int) (O Int) (P Int) (Q Bool) (R Int) (S Int) (T Int) (U Int) (V Int) (W Int) (X Bool) (Y Bool) (Z Int) (A1 Int) (B1 Int) (C1 Int) (D1 Int) (E1 Int) (F1 Bool) (G1 Int) (H1 Int) (I1 Int) (J1 Int) (K1 Int) (L1 Int) (M1 Bool) (N1 Bool) (O1 state_type) (P1 state_type) (Q1 Int) (R1 tx_type) ) 
    (=>
      (and
        (block_17_try_clause_58f_58_64_0 D Q1 A C R1 O1 P1 B)
        (let ((a!1 (ite (>= K 0)
                ((_ int_to_bv 16) K)
                (bvmul #xffff ((_ int_to_bv 16) (* (- 1) K)))))
      (a!2 (ite (>= L 0)
                ((_ int_to_bv 16) (* 8 L))
                (bvmul #xffff ((_ int_to_bv 16) (* (- 8) L)))))
      (a!4 (ite (>= R 0)
                ((_ int_to_bv 16) R)
                (bvmul #xffff ((_ int_to_bv 16) (* (- 1) R)))))
      (a!5 (ite (>= S 0)
                ((_ int_to_bv 16) (* 8 S))
                (bvmul #xffff ((_ int_to_bv 16) (* (- 8) S)))))
      (a!7 (ite (>= G1 0)
                ((_ int_to_bv 16) G1)
                (bvmul #xffff ((_ int_to_bv 16) (* (- 1) G1)))))
      (a!8 (ite (>= H1 0)
                ((_ int_to_bv 16) (* 8 H1))
                (bvmul #xffff ((_ int_to_bv 16) (* (- 8) H1)))))
      (a!10 (ite (>= Z 0)
                 ((_ int_to_bv 16) Z)
                 (bvmul #xffff ((_ int_to_bv 16) (* (- 1) Z)))))
      (a!11 (ite (>= A1 0)
                 ((_ int_to_bv 16) (* 8 A1))
                 (bvmul #xffff ((_ int_to_bv 16) (* (- 8) A1))))))
(let ((a!3 (+ (* 256 (ubv_to_int #x00))
              (ubv_to_int ((_ extract 15 8) (bvshl a!1 a!2)))))
      (a!6 (+ (* 256 (ubv_to_int #x00))
              (ubv_to_int ((_ extract 15 8) (bvshl a!4 a!5)))))
      (a!9 (+ (* 256 (ubv_to_int #x00))
              (ubv_to_int ((_ extract 15 8) (bvshl a!7 a!8)))))
      (a!12 (+ (* 256 (ubv_to_int #x00))
               (ubv_to_int ((_ extract 15 8) (bvshl a!10 a!11))))))
  (and (= N1 (or F1 M1))
       (= Q (= O P))
       (= X (= V W))
       (= Y (and X Q))
       (= F1 (= D1 E1))
       (= G F)
       (= H G)
       (= E D)
       (= P 255)
       (= K B)
       (= J I)
       (= W 255)
       (= S 1)
       (= R B)
       (= F E)
       (= O N)
       (= N (ite (<= 2 L) M a!3))
       (= L 0)
       (= I H)
       (= V U)
       (= U (ite (<= 2 S) T a!6))
       (= D1 C1)
       (= Z B)
       (= H1 1)
       (= J1 (ite (<= 2 H1) I1 a!9))
       (= C1 (ite (<= 2 A1) B1 a!12))
       (= E1 0)
       (= K1 J1)
       (= A1 0)
       (= G1 B)
       (= L1 0)
       (>= K 0)
       (>= O 0)
       (>= N 0)
       (>= D1 0)
       (>= Z 0)
       (>= C1 0)
       (<= K 65535)
       (<= O 255)
       (<= N 255)
       (<= D1 255)
       (<= Z 65535)
       (<= C1 255)
       (or (not Q) (and (<= R 65535) (>= R 0)))
       (or (not Q) (and (<= V 255) (>= V 0)))
       (or (not Q) (and (<= U 255) (>= U 0)))
       (or F1 (and (<= J1 255) (>= J1 0)))
       (or F1 (and (<= K1 255) (>= K1 0)))
       (or F1 (and (<= G1 65535) (>= G1 0)))
       (= M1 (= K1 L1)))))
      )
      (block_16_f_62_64_0 J Q1 A C R1 O1 P1 B)
    )
  )
)
(assert
  (forall ( (A abi_type) (B Int) (C crypto_type) (D Int) (E state_type) (F state_type) (G Int) (H tx_type) ) 
    (=>
      (and
        (block_18_try_clause_60f_60_64_0 D G A C H E F B)
        true
      )
      (block_16_f_62_64_0 D G A C H E F B)
    )
  )
)
(assert
  (forall ( (A abi_type) (B Int) (C crypto_type) (D Int) (E state_type) (F state_type) (G Int) (H tx_type) ) 
    (=>
      (and
        (block_16_f_62_64_0 D G A C H E F B)
        true
      )
      (block_14_return_function_f__63_64_0 D G A C H E F B)
    )
  )
)
(assert
  (forall ( (A abi_type) (B Int) (C crypto_type) (D Int) (E state_type) (F state_type) (G Int) (H tx_type) ) 
    (=>
      (and
        true
      )
      (block_26_function_f__63_64_0 D G A C H E F B)
    )
  )
)
(assert
  (forall ( (A abi_type) (B Int) (C crypto_type) (D Int) (E Int) (F Int) (G state_type) (H state_type) (I state_type) (J state_type) (K Int) (L tx_type) ) 
    (=>
      (and
        (block_26_function_f__63_64_0 D K A C L G H B)
        (summary_5_function_f__63_64_0 E K A C L I J)
        (let ((a!1 (= (select (bytes_tuple_accessor_array (msg.data L)) 3) 240))
      (a!2 (= (select (bytes_tuple_accessor_array (msg.data L)) 2) 31))
      (a!3 (= (select (bytes_tuple_accessor_array (msg.data L)) 1) 18))
      (a!4 (= (select (bytes_tuple_accessor_array (msg.data L)) 0) 38))
      (a!5 (>= (+ (select (balances H) K) F) 0))
      (a!6 (<= (+ (select (balances H) K) F)
               115792089237316195423570985008687907853269984665640564039457584007913129639935))
      (a!7 (store (balances H) K (+ (select (balances H) K) F))))
  (and (= H G)
       a!1
       a!2
       a!3
       a!4
       (= (msg.value L) 0)
       (= (msg.sig L) 638722032)
       (= D 0)
       (>= (tx.origin L) 0)
       (>= (tx.gasprice L) 0)
       (>= (msg.value L) 0)
       (>= (msg.sender L) 0)
       (>= (block.timestamp L) 0)
       (>= (block.number L) 0)
       (>= (block.gaslimit L) 0)
       (>= (block.difficulty L) 0)
       (>= (block.coinbase L) 0)
       (>= (block.chainid L) 0)
       (>= (block.basefee L) 0)
       (>= (bytes_tuple_accessor_length (msg.data L)) 4)
       a!5
       (>= F (msg.value L))
       (<= (tx.origin L) 1461501637330902918203684832716283019655932542975)
       (<= (tx.gasprice L)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (msg.value L)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (msg.sender L) 1461501637330902918203684832716283019655932542975)
       (<= (block.timestamp L)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.number L)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.gaslimit L)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.difficulty L)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.coinbase L) 1461501637330902918203684832716283019655932542975)
       (<= (block.chainid L)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       (<= (block.basefee L)
           115792089237316195423570985008687907853269984665640564039457584007913129639935)
       a!6
       (= I (state_type a!7))))
      )
      (summary_6_function_f__63_64_0 E K A C L G J)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D state_type) (E state_type) (F Int) (G tx_type) ) 
    (=>
      (and
        (and (= C 0) (= E D))
      )
      (contract_initializer_entry_28_C_64_0 C F A B G D E)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D state_type) (E state_type) (F Int) (G tx_type) ) 
    (=>
      (and
        (contract_initializer_entry_28_C_64_0 C F A B G D E)
        true
      )
      (contract_initializer_after_init_29_C_64_0 C F A B G D E)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D state_type) (E state_type) (F Int) (G tx_type) ) 
    (=>
      (and
        (contract_initializer_after_init_29_C_64_0 C F A B G D E)
        true
      )
      (contract_initializer_27_C_64_0 C F A B G D E)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D state_type) (E state_type) (F Int) (G tx_type) ) 
    (=>
      (and
        (and (= C 0) (>= (select (balances E) F) (msg.value G)) (= E D))
      )
      (implicit_constructor_entry_30_C_64_0 C F A B G D E)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D Int) (E state_type) (F state_type) (G state_type) (H Int) (I tx_type) ) 
    (=>
      (and
        (implicit_constructor_entry_30_C_64_0 C H A B I E F)
        (contract_initializer_27_C_64_0 D H A B I F G)
        (not (<= D 0))
      )
      (summary_constructor_2_C_64_0 D H A B I E G)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D Int) (E state_type) (F state_type) (G state_type) (H Int) (I tx_type) ) 
    (=>
      (and
        (contract_initializer_27_C_64_0 D H A B I F G)
        (implicit_constructor_entry_30_C_64_0 C H A B I E F)
        (= D 0)
      )
      (summary_constructor_2_C_64_0 D H A B I E G)
    )
  )
)
(assert
  (forall ( (A abi_type) (B crypto_type) (C Int) (D state_type) (E state_type) (F Int) (G tx_type) ) 
    (=>
      (and
        (summary_6_function_f__63_64_0 C F A B G D E)
        (interface_0_C_64_0 F A B D)
        (= C 1)
      )
      error_target_8_0
    )
  )
)
(assert
  (forall ( (CHC_COMP_UNUSED Bool) ) 
    (=>
      (and
        error_target_8_0
        true
      )
      false
    )
  )
)

(check-sat)
(exit)
