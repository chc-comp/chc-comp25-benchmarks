(set-logic HORN)


(declare-fun |main@verifier.error.split| ( ) Bool)
(declare-fun |main@entry| ( Int Int ) Bool)
(declare-fun |main@_bb| ( Int Bool Int Int Int Int ) Bool)

(assert
  (forall ( (A Int) (B Int) ) 
    (=>
      (and
        true
      )
      (main@entry A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Bool) (G Int) (H Bool) (I Int) (J Int) (K Int) (L Int) (M Bool) (N Int) (O Int) (P Int) (Q Bool) (R Bool) (S Int) (T Int) (U Bool) (V Int) (W Int) (X Int) (Y Int) ) 
    (=>
      (and
        (main@entry T D)
        (and (= B D)
     (= C D)
     (= E T)
     (= G T)
     (= I (ite F 1 0))
     (or (not R) (not Q) (= M H))
     (or (not R) (not Q) (= U M))
     (or (not R) (not Q) (= N I))
     (or (not R) (not Q) (= O J))
     (or (not R) (not Q) (= P K))
     (or (not R) (not Q) (= S L))
     (or (not R) (not Q) (= V N))
     (or (not R) (not Q) (= W O))
     (or (not R) (not Q) (= X P))
     (or (not R) (not Q) (= Y S))
     (or (not Q) (and R Q))
     (= Q true)
     (= A D))
      )
      (main@_bb T U V W X Y)
    )
  )
)
(assert
  (forall ( (A Bool) (B Bool) (C Bool) (D Bool) (E Bool) (F Bool) (G Int) (H Bool) (I Bool) (J Bool) (K Int) (L Bool) (M Bool) (N Int) (O Int) (P Int) (Q Int) (R Int) (S Int) (T Int) (U Int) (V Int) (W Bool) (X Int) (Y Int) (Z Int) (A1 Bool) (B1 Int) (C1 Int) (D1 Bool) (E1 Int) (F1 Bool) (G1 Int) (H1 Int) (I1 Int) (J1 Int) (K1 Bool) (L1 Int) (M1 Int) (N1 Int) (O1 Bool) (P1 Bool) (Q1 Int) (R1 Int) (S1 Bool) (T1 Int) (U1 Int) (V1 Int) (W1 Int) ) 
    (=>
      (and
        (main@_bb R1 J G R S Q)
        (and (not (= (= R 0) D))
     (not (= (= S 0) A))
     (= C (and B A))
     (= F (and D C))
     (or (not H) (not E) F)
     (or (not W) (not H) I)
     (or (not A1) (not I) (not H))
     (or (not P1) (and P1 A1) (and P1 W))
     (or (not P1) (not W) (= U O))
     (or (not P1) (not W) (= V P))
     (or (not P1) (not W) (= X Q))
     (or (not P1) (not W) (= H1 U))
     (or (not P1) (not W) (= I1 V))
     (or (not P1) (not W) (= J1 X))
     (or (not P1) (not A1) (= Y R))
     (or (not P1) (not A1) (= Z S))
     (or (not P1) (not A1) (= B1 T))
     (or (not P1) (not A1) (= H1 Y))
     (or (not P1) (not A1) (= I1 Z))
     (or (not P1) (not A1) (= J1 B1))
     (or (not P1) (not O1) (= K1 F1))
     (or (not P1) (not O1) (= S1 K1))
     (or (not P1) (not O1) (= L1 G1))
     (or (not P1) (not O1) (= M1 H1))
     (or (not P1) (not O1) (= N1 I1))
     (or (not P1) (not O1) (= Q1 J1))
     (or (not P1) (not O1) (= T1 L1))
     (or (not P1) (not O1) (= U1 M1))
     (or (not P1) (not O1) (= V1 N1))
     (or (not P1) (not O1) (= W1 Q1))
     (or (not H) (= I (= G 0)))
     (or (not H) (and H E))
     (or (not W) (not (= J L)))
     (or (not W) (not (= L M)))
     (or (not W) (= K (ite L (- 1) 0)))
     (or (not W) (= N (ite M (- 1) 0)))
     (or (not W) (= O (+ R K)))
     (or (not W) (= P (+ S N)))
     (or (not W) (and W H))
     (or (not A1) (= T (+ (- 1) Q)))
     (or (not A1) (and A1 H))
     (or (not O1) (and P1 O1))
     (or (not P1) (= C1 R1))
     (or (not P1) (= E1 R1))
     (or (not P1) (= G1 (ite D1 1 0)))
     (= O1 true)
     (not (= (= Q 0) B)))
      )
      (main@_bb R1 S1 T1 U1 V1 W1)
    )
  )
)
(assert
  (forall ( (A Int) (B Bool) (C Int) (D Bool) (E Bool) (F Bool) (G Bool) (H Bool) (I Bool) (J Int) (K Int) (L Bool) (M Bool) (N Int) (O Bool) (P Bool) (Q Bool) (R Bool) (S Bool) (T Bool) (U Int) (V Bool) (W Bool) (X Bool) (Y Bool) (Z Bool) ) 
    (=>
      (and
        (main@_bb A B C N K J)
        (and (not (= (= J 0) E))
     (not (= (= K 0) D))
     (= F (and E D))
     (= I (and G F))
     (or (not S) (not I) (not H))
     (or (not T) (and S T))
     (or (not W) (= V (= U 0)))
     (or (not W) (and W T))
     (or (not X) (and X W))
     (or (not Y) (and Y X))
     (or (not Z) (and Z Y))
     (or (not S) (= L (= J 0)))
     (or (not S) (= M (= K 0)))
     (or (not S) (= O (or M L)))
     (or (not S) (= P (= N 0)))
     (or (not S) (= Q (or P O)))
     (or (not S) (= U (ite Q 1 0)))
     (or (not S) (and S H))
     (or (not S) (not R))
     (or V (not W))
     (= Z true)
     (not (= (= N 0) G)))
      )
      main@verifier.error.split
    )
  )
)
(assert
  (forall ( (CHC_COMP_UNUSED Bool) ) 
    (=>
      (and
        main@verifier.error.split
        true
      )
      false
    )
  )
)

(check-sat)
(exit)
