(set-logic HORN)


(declare-fun |main@_bb| ( Int Int Int Int Int Bool ) Bool)
(declare-fun |main@orig.main.exit.split| ( ) Bool)
(declare-fun |main@entry| ( Int Int ) Bool)

(assert
  (forall ( (A Int) (B Int) ) 
    (=>
      (and
        true
      )
      (main@entry A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Bool) (H Bool) (I Bool) (J Bool) (K Bool) (L Bool) (M Bool) (N Int) (O Int) (P Int) (Q Int) (R Bool) (S Int) (T Int) (U Int) (V Int) (W Bool) (X Bool) (Y Bool) (Z Int) (A1 Int) (B1 Int) (C1 Int) (D1 Int) (E1 Bool) ) 
    (=>
      (and
        (main@entry Z D)
        (and (not (= (= O 0) G))
     (not (= (= P 0) I))
     (= J (and H G))
     (= L (and J I))
     (= A D)
     (= B D)
     (= C D)
     (= E Z)
     (= F Z)
     (or (not K) (not X) L)
     (or (not X) (not W) (= Y R))
     (or (not X) (not W) (= E1 Y))
     (or (not X) (not W) (= S N))
     (or (not X) (not W) (= T O))
     (or (not X) (not W) (= U P))
     (or (not X) (not W) (= V Q))
     (or (not X) (not W) (= A1 S))
     (or (not X) (not W) (= B1 T))
     (or (not X) (not W) (= C1 U))
     (or (not X) (not W) (= D1 V))
     (or (not W) (and X W))
     (or (not X) (= Q (ite M 1 0)))
     (or (not X) (and X K))
     (= W true)
     (not (= (= N 0) H)))
      )
      (main@_bb Z A1 B1 C1 D1 E1)
    )
  )
)
(assert
  (forall ( (A Int) (B Bool) (C Bool) (D Bool) (E Int) (F Bool) (G Bool) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Int) (O Int) (P Int) (Q Bool) (R Int) (S Int) (T Int) (U Bool) (V Int) (W Int) (X Bool) (Y Int) (Z Bool) (A1 Bool) (B1 Bool) (C1 Bool) (D1 Bool) (E1 Int) (F1 Int) (G1 Int) (H1 Int) (I1 Bool) (J1 Int) (K1 Int) (L1 Int) (M1 Int) (N1 Bool) (O1 Bool) (P1 Bool) (Q1 Int) (R1 Int) (S1 Int) (T1 Int) (U1 Int) (V1 Bool) ) 
    (=>
      (and
        (main@_bb Q1 K M L A D)
        (let ((a!1 (or (not O1) (not (= (= E1 0) A1))))
      (a!2 (or (not O1) (not (= (= F1 0) Z))))
      (a!3 (or (not O1) (not (= (= G1 0) B1)))))
  (and (or (not Q) (not B) C)
       (or (not U) (not C) (not B))
       (or (not O1) (and O1 U) (and O1 Q))
       (or (not O1) (not Q) (= O I))
       (or (not O1) (not Q) (= P J))
       (or (not O1) (not Q) (= R K))
       (or (not O1) (not Q) (= E1 R))
       (or (not O1) (not Q) (= F1 P))
       (or (not O1) (not Q) (= G1 O))
       (or (not O1) (not U) (= S L))
       (or (not O1) (not U) (= T M))
       (or (not O1) (not U) (= V N))
       (or (not O1) (not U) (= E1 V))
       (or (not O1) (not U) (= F1 T))
       (or (not O1) (not U) (= G1 S))
       (or (not O1) (not N1) (= P1 I1))
       (or (not O1) (not N1) (= V1 P1))
       (or (not O1) (not N1) (= J1 E1))
       (or (not O1) (not N1) (= K1 F1))
       (or (not O1) (not N1) (= L1 G1))
       (or (not O1) (not N1) (= M1 H1))
       (or (not O1) (not N1) (= R1 J1))
       (or (not O1) (not N1) (= S1 K1))
       (or (not O1) (not N1) (= T1 L1))
       (or (not O1) (not N1) (= U1 M1))
       (or (not O1) (not N1) D1)
       (or (not Q) (not (= D F)))
       (or (not Q) (not (= F G)))
       (or (not Q) (= E (ite F (- 1) 0)))
       (or (not Q) (= H (ite G (- 1) 0)))
       (or (not Q) (= I (+ L E)))
       (or (not Q) (= J (+ M H)))
       (or (not Q) (and Q B))
       (or (not U) (= N (+ (- 1) K)))
       (or (not U) (and U B))
       (or (not N1) (and O1 N1))
       a!1
       a!2
       a!3
       (or (not O1) (= C1 (and A1 Z)))
       (or (not O1) (= D1 (and C1 B1)))
       (or (not O1) (= Y Q1))
       (or (not O1) (= W Q1))
       (or (not O1) (= H1 (ite X 1 0)))
       (= N1 true)
       (= C (= A 0))))
      )
      (main@_bb Q1 R1 S1 T1 U1 V1)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Bool) (I Bool) (J Bool) (K Bool) (L Bool) (M Int) (N Int) (O Int) (P Int) (Q Int) (R Bool) (S Int) (T Int) (U Int) (V Bool) (W Bool) (X Int) (Y Bool) (Z Bool) (A1 Bool) (B1 Bool) (C1 Bool) (D1 Bool) (E1 Bool) ) 
    (=>
      (and
        (main@entry G D)
        (and (not (= (= N 0) H))
     (not (= (= O 0) J))
     (= K (and I H))
     (= L (and K J))
     (= A D)
     (= B D)
     (= C D)
     (= E G)
     (= F G)
     (or (not D1) (= X S) (not R))
     (or (not D1) (= P M) (not R))
     (or (not D1) (= Q N) (not R))
     (or (not D1) (= S O) (not R))
     (or (not D1) (= T P) (not R))
     (or (not D1) (= U Q) (not R))
     (or (not D1) (not L) (not R))
     (or (not D1) (= V (= U 0)))
     (or (not D1) (= Z (or W V)))
     (or (not D1) (= B1 (or Y Z)))
     (or (not D1) (not (= B1 C1)))
     (or (not D1) (= W (= T 0)))
     (or (not D1) (= Y (= X 0)))
     (or (not D1) (and R D1))
     (or (not D1) (not A1))
     (or (not D1) C1)
     (or (not E1) (and E1 D1))
     (= E1 true)
     (not (= (= M 0) I)))
      )
      main@orig.main.exit.split
    )
  )
)
(assert
  (forall ( (A Int) (B Bool) (C Bool) (D Bool) (E Int) (F Bool) (G Bool) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Int) (O Int) (P Int) (Q Bool) (R Int) (S Int) (T Int) (U Bool) (V Int) (W Int) (X Int) (Y Bool) (Z Int) (A1 Int) (B1 Bool) (C1 Bool) (D1 Bool) (E1 Bool) (F1 Bool) (G1 Int) (H1 Int) (I1 Int) (J1 Int) (K1 Int) (L1 Bool) (M1 Int) (N1 Int) (O1 Int) (P1 Int) (Q1 Int) (R1 Int) (S1 Bool) (T1 Int) (U1 Int) (V1 Int) (W1 Bool) (X1 Bool) (Y1 Int) (Z1 Bool) (A2 Bool) (B2 Bool) (C2 Bool) (D2 Bool) (E2 Bool) (F2 Bool) ) 
    (=>
      (and
        (main@_bb A1 K M L A D)
        (let ((a!1 (or (not L1) (not (= (= I1 0) D1))))
      (a!2 (or (not L1) (not (= (= H1 0) B1))))
      (a!3 (or (not L1) (not (= (= G1 0) C1)))))
  (and (or (not U) (not C) (not B))
       (or C (not Q) (not B))
       (or (not L1) (and L1 U) (and L1 Q))
       (or (not L1) (not U) (= S L))
       (or (not L1) (not U) (= T M))
       (or (not L1) (not U) (= V N))
       (or (not L1) (not U) (= I1 S))
       (or (not L1) (not U) (= H1 T))
       (or (not L1) (not U) (= G1 V))
       (or (not L1) (not Q) (= P J))
       (or (not L1) (not Q) (= O I))
       (or (not L1) (not Q) (= R K))
       (or (not L1) (not Q) (= I1 O))
       (or (not L1) (not Q) (= H1 P))
       (or (not L1) (not Q) (= G1 R))
       (or (not E2) (= Y1 T1) (not S1))
       (or (not E2) (= Q1 N1) (not S1))
       (or (not E2) (= R1 O1) (not S1))
       (or (not E2) (= T1 P1) (not S1))
       (or (not E2) (= U1 Q1) (not S1))
       (or (not E2) (= V1 R1) (not S1))
       (or (not S1) (not L1) (= J1 G1))
       (or (not S1) (not L1) (= K1 H1))
       (or (not S1) (not L1) (= M1 I1))
       (or (not S1) (not L1) (= N1 J1))
       (or (not S1) (not L1) (= O1 K1))
       (or (not S1) (not L1) (= P1 M1))
       (or (not S1) (not L1) (not F1))
       (or (not U) (= N (+ (- 1) K)))
       (or (not U) (and U B))
       (or (not Q) (not (= D F)))
       (or (not Q) (not (= F G)))
       (or (not Q) (= E (ite F (- 1) 0)))
       (or (not Q) (= H (ite G (- 1) 0)))
       (or (not Q) (= I (+ L E)))
       (or (not Q) (= J (+ M H)))
       (or (not Q) (and Q B))
       (or (not E2) (= W1 (= V1 0)))
       (or (not E2) (= A2 (or X1 W1)))
       (or (not E2) (= C2 (or Z1 A2)))
       (or (not E2) (not (= C2 D2)))
       (or (not E2) (= X1 (= U1 0)))
       (or (not E2) (= Z1 (= Y1 0)))
       (or (not E2) (and S1 E2))
       (or (not E2) (not B2))
       (or (not E2) D2)
       a!1
       a!2
       a!3
       (or (not L1) (= F1 (and E1 D1)))
       (or (not L1) (= E1 (and C1 B1)))
       (or (not L1) (= W A1))
       (or (not L1) (= X (ite Y 1 0)))
       (or (not L1) (= Z A1))
       (or (not S1) (and S1 L1))
       (or (not F2) (and F2 E2))
       (= F2 true)
       (= C (= A 0))))
      )
      main@orig.main.exit.split
    )
  )
)
(assert
  (forall ( (CHC_COMP_UNUSED Bool) ) 
    (=>
      (and
        main@orig.main.exit.split
        true
      )
      false
    )
  )
)

(check-sat)
(exit)
